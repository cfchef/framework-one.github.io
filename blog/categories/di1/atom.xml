<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Di1 | FW/1 - The Invisible Framework]]></title>
  <link href="http://framework-one.github.io/blog/categories/di1/atom.xml" rel="self"/>
  <link href="http://framework-one.github.io/"/>
  <updated>2015-01-29T15:00:17-08:00</updated>
  <id>http://framework-one.github.io/</id>
  <author>
    <name><![CDATA[Sean Corfield]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FW/1 3.0 RC 1 Available]]></title>
    <link href="http://framework-one.github.io/blog/2015/01/24/fw1-3-0-rc-1-available/"/>
    <updated>2015-01-24T22:21:49-08:00</updated>
    <id>http://framework-one.github.io/blog/2015/01/24/fw1-3-0-rc-1-available</id>
    <content type="html"><![CDATA[<p>FW/1 3.0 has been in beta testing since August 2014 and lots of people are already running in production so I figured it was time to push out the first <a href="https://github.com/framework-one/fw1/releases/tag/v3.0-rc1">Release Candidate build</a>.</p>

<p>The main focus of RC 1 has been bug fixes. Only a small number of functional enhancements have been added (notably <code>getEnvVar()</code> to retrieve the value of a system environment variable which can be useful during environment control processing).<!-- more --> Some deprecated features have been removed:</p>

<ul>
<li><code>getRC()</code> and <code>getRCValue()</code> have been removed, along with the configuration flag that had been enabling them. They were a hasty addition at the end of the 2.5 cycle and they were a mistake &ndash; if you&rsquo;re using them, you&rsquo;re doing something wrong!</li>
<li><code>org.corfield.framework</code> is no longer supported &ndash; use <code>framework.one</code> instead. It was always a questionable choice of file path for the framework and I&rsquo;ve been tempted to change it several times. The 3.0 cycle deprecated it and moved the framework CFC to the <code>/framework</code> folder, where DI/1 has lived since the 2.5 cycle. This is probably a <strong>breaking change</strong> unless you&rsquo;ve been using prerelease builds of 3.0 and have already eliminated the deprecation warnings!</li>
</ul>


<p>In addition, AOP/1 is no longer bundled with FW/1. It&rsquo;s not ready for primetime yet so I didn&rsquo;t want to include it in the 3.0 release. It got a lot of work between Alpha 1 and Beta 1 but additional bugs and some hard problems came up in testing. It&rsquo;s still available on the <code>aop1</code> branch if you want to experiment with it (and help find and fix more bugs in it!).</p>

<p>As part of the preparation for RC 1, all of the documentation has been reviewed and updated and DI/1&rsquo;s documentation is now <a href="http://framework-one.github.io/documentation/using-di-one.html">part of the main documentation site</a>. Big thanks go to Nando Breiter for bringing that across from the old wiki in the standalone DI/1 repo. Code contributors to RC 1 include: John Berquist, Ryan Guill, Cameron Childress. Thank you!</p>

<p>At this point, only bug fixes will be considered before FW/1 3.0 goes &ldquo;gold&rdquo; and given the long period of testing so far on Beta 1, that final release shouldn&rsquo;t be too far away.</p>

<p>Oh, and if you go to <a href="http://fw1.riaforge.org">FW/1&rsquo;s page on RIAForge</a>, you&rsquo;ll see that 3.0 RC 1 is the default download now, instead of 2.5.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.0 Beta 1 Available]]></title>
    <link href="http://framework-one.github.io/blog/2014/08/18/fw1-3-0-beta-1-available/"/>
    <updated>2014-08-18T11:21:49-07:00</updated>
    <id>http://framework-one.github.io/blog/2014/08/18/fw1-3-0-beta-1-available</id>
    <content type="html"><![CDATA[<p>Just over four weeks ago, I released <a href="http://framework-one.github.io/blog/2014/07/20/fw1-3-0-alpha-1-available-for-testing/">FW/1 3.0 Alpha 1</a> and declared it <em>feature complete</em>. There were some big changes in that release and, in particular, some long-standing features were removed (after being deprecated in FW/1 2.5) and some recently-introduced features were also deprecated. Today I am releasing the first Beta version which includes bug fixes and usability enhancements, focusing primarily on DI/1 and AOP/1.<!-- more --></p>

<p>You can <a href="https://github.com/framework-one/fw1/releases/tag/v3.0-beta1">download FW/1 3.0 Beta 1 from Github</a> and that release page has a link to <a href="https://github.com/framework-one/fw1/issues?milestone=13&amp;page=1&amp;state=closed">the complete list of closed tickets in FW/1 3.0 Beta 1</a> and <a href="https://github.com/framework-one/di1/issues?milestone=1&amp;page=1&amp;state=closed">closed tickets in DI/1 that are for FW/1 3.0</a>. Note that those issues are only fixed in the FW/1 repository, not the DI/1 repository, but they will be backported later on.</p>

<h2>DI/1 and AOP/1 come of age</h2>

<p>As indicated above, the focus of Beta 1 has been on cleaning up DI/1 and AOP/1 to get them to a &ldquo;1.0&rdquo; release status as part of FW/1 3.0. Going forward, the DI/1 and AOP/1 repositories will only get updated with released versions and will be stripped down to minimal examples for those who wish to use them standalone. Future development (including issues and test cases etc) will all be done in the FW/1 repository.</p>

<p>DI/1 has been enhanced in this release to provide some features that will help developers migrating from ColdSpring (or who are looking for some of ColdSpring&rsquo;s more advanced features in DI/1).</p>

<p>AOP/1 has been rewritten to better integrate with DI/1 and ensure that injected beans are intercepted (the <code>beanProxy.cfc</code> needed only minor tweaks and it does the heavy lifting of interception).</p>

<p>Here is the full list of changes in DI/1 and AOP/1 (since Alpha 1):</p>

<ul>
<li>Dotted path deduction rewritten / improved <a href="https://github.com/framework-one/di1/issues/61">di1/#61</a>. There were a number of situations where DI/1 was unable to figure out a dotted component path for CFCs identified through relative folder paths, especially outside the primary webroot of an application. This should be addressed now!</li>
<li>New option <code>omitDirectoryAliases</code> &ndash; default <code>false</code> <a href="https://github.com/framework-one/di1/issues/64">di1/#64</a>. Set this <code>true</code> if you want to suppress the directory-based aliases that DI/1 creates (e.g., <code>beans/user.cfc</code> => <code>userBean</code>). This will enforce uniqueness of bean names (since the suffix will no longer differentiate beans with the same name in different folders).</li>
<li>IIS web server mapping case sensitivity <a href="https://github.com/framework-one/di1/issues/65">di1/#65</a>. A bug fix for an annoying edge case caused by IIS being case sensitive in a situation that caused hard-to-debug errors from DI/1.</li>
<li>AOP/1 now handles intercepted methods that return null <a href="https://github.com/framework-one/fw1/issues/264">#264</a>. Self-explanatory.</li>
<li>DI/1 now accepts a load listener as part of its configuration <a href="https://github.com/framework-one/fw1/issues/273">#273</a>. This was added to allow load listeners to be added easily via <code>diConfig</code> when using FW/1. A load listener is the recommended way to declare new beans, add aliases and additional beans and set up factory beans/methods (see next item).</li>
</ul>


<p>The following DI/1 setups are now equivalent:</p>

<pre><code>var bf1 = new framework.ioc( "..." );
bf1.onLoad( myListener );

var bf2 = new framework.ioc( "...", { loadListener = myListener } );
</code></pre>

<ul>
<li>DI/1 now supports factory beans / factory methods <a href="https://github.com/framework-one/fw1/issues/274">#274</a>. The new API <code>factoryBean()</code> allows you to specify that a bean should be obtained from another bean &ndash; the <em>factory bean</em> &ndash; by calling a specified method &ndash; the <em>factory method</em> &ndash; with optionally specified arguments, and optional bean value overrides (similar to the <code>declareBean()</code> API).</li>
</ul>


<p>Here are some examples:</p>

<pre><code>bf.factoryBean( "a1Bean", "myFactory", "theMethod" );
// a1Bean = bf.getBean("myFactory").theMethod();
bf.factoryBean( "a2Bean", "yourFactory", "createIt", [ "dsn" ] );
// a2Bean = bf.getBean("yourFactory").createIt( bf.getBean("dsn") );
bf.factoryBean( "a3Bean", "warehouse", "builder", [ "dsn", "config" ],
    { dsn = "myDB" } );
// a3Bean = bf.getBean("warehouse").builder( "myDB", bf.getBean("config") );
</code></pre>

<ul>
<li>DI/1 now supports a post-injection <em>init-method</em> like ColdSpring <a href="https://github.com/framework-one/fw1/issues/275">#275</a>. A new configuration option <code>initMethod</code> allows you to specify a no-argument method that DI/1 should attempt to call on all managed beans after all of their dependencies have been injected. This allows beans to perform additional configuration that requires access to their injected dependencies, which cannot be performed in a constructor. You can thank Daniel Budde II for this feature being added (and for spurring me to finally add factory beans/methods which I&rsquo;d been thinking about for a while)!</li>
<li>AOP/1 now intercepts injected beans <a href="https://github.com/framework-one/fw1/issues/277">#277</a>. This was the rewrite of AOP/1 to hook into DI/1&rsquo;s <code>resolveBean()</code> method via a new <code>setupInitMethod()</code> extension point (which will make additional extensions to DI/1 easier). Previously AOP/1 only intercepted beans obtained directly via <code>getBean()</code>. Thank you to Daniel Budde II for identifying this issue and providing a test case to help debug and verify the new behavior.</li>
<li>DI/1 no longer resolves beans multiple times <a href="https://github.com/framework-one/fw1/issues/279">#279</a>. This was a performance issue but previously harmless. With the enhancements to AOP/1, this introduced several bugs (hopefully all fixed now!).</li>
</ul>


<h2>FW/1 bug fixes and enhancements</h2>

<p>Here are the changes in FW/1 itself since Alpha 1:</p>

<ul>
<li>Controllers are reloaded after the bean factory is updated <a href="https://github.com/framework-one/fw1/issues/276">#276</a>. Previously, FW/1 cached controllers and recreating the bean factory was not sufficient to pick up changes in controller files. Now, when you call <code>setBeanFactory()</code>, the controller cache is cleared so controllers will be reloaded and any changes will be picked up (regardless of whether controllers are managed by FW/1 or DI/1).</li>
</ul>


<h2>The road to gold</h2>

<p>The next milestone should be Release Candidate 1 and only bug fixes are likely to be considered at this point, no new features or enhancements, unless they are required to make the Beta feature set fully usable. If all goes well, RC1 should be released in about 3-4 weeks, and the <em>gold</em> 3.0 release about 3-4 weeks after that (late September / early October).</p>

<p>Note that <code>org.framework.corfield</code> is a deprecated path for FW/1 &ndash; it has moved to <code>framework.one</code> &ndash; and whilst it is supported during the 3.0 prerelease builds, it will be removed in the gold release. Similarly, as noted in the Alpha 1 blog post, <code>getRC()</code> and <code>getRCValue()</code> are deprecated and will also be removed in the gold release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.0 Alpha 1 Available for Testing!]]></title>
    <link href="http://framework-one.github.io/blog/2014/07/20/fw1-3-0-alpha-1-available-for-testing/"/>
    <updated>2014-07-20T18:14:24-07:00</updated>
    <id>http://framework-one.github.io/blog/2014/07/20/fw1-3-0-alpha-1-available-for-testing</id>
    <content type="html"><![CDATA[<p>I consider FW/1 3.0 to be <em>feature complete</em> at this point so I am releasing Alpha 1 for testing. I expect people to run into a few bugs &ndash; this release has some big changes in it, compared to the 2.x release stream &ndash; and it&rsquo;s possible that new feature requests will crop up during alpha testing, but everything I wanted to change is in place.<!-- more --></p>

<p>You can <a href="https://github.com/framework-one/fw1/releases/tag/v3.0-alpha1">download FW/1 3.0 Alpha 1 from Github</a> and that release page has a link to <a href="https://github.com/framework-one/fw1/issues?milestone=13&amp;page=1&amp;state=closed">the complete list of closed tickets in FW/1 3.0 Alpha 1</a> although I&rsquo;m going to summarize the most important ones in this blog post.</p>

<h2>Features Removed</h2>

<p>First and foremost, some features that have been part of FW/1 from the early days have been removed. These features were deprecated in FW/1 2.5 as a migration path so I would strongly advise anyone still on FW/1 2.2.1 (or earlier) to upgrade to 2.5 in preparation for the (breaking) changes in 3.0!</p>

<p>These features include the <code>service()</code> API call and the <code>start*()</code> and <code>end*()</code> item handlers within controllers, as well as global references to <code>rc</code> (where it was not passed as an argument or made available in a view automatically). You can read more about the deprecation (and now removal) of these features in <a href="http://framework-one.github.io/blog/2014/05/25/fw1-2-5-is-released/">the release announcement for FW/1 2.5</a> on this blog. Management of services via a bean factory, with property-based injection, and direct invocation has long been considered a much better way to interact with services than using the &ldquo;service queue&rdquo; that FW/1 originally provided.</p>

<p>In addition, the recently added <code>getRC()</code> and <code>getRCValue()</code> API calls &ndash; added in FW/1 2.5 during the deprecation of global references to <code>rc</code> &ndash; have been deprecated <em>and will be removed in the final FW/1 3.0 release</em>. They were hastily added and they were unnecessary. In this alpha release, their use will trigger an exception explaining what to use instead. You can add:</p>

<pre><code>framework.enableLegacyRCAccessors = true
</code></pre>

<p>to your configuration while you update your code (this will suppress the exception but still write a message to your application server&rsquo;s console output &ndash; just as the deprecation process did in FW/1 2.5).</p>

<h2>Automatic Bean Factory Usage</h2>

<p>The other big change in this 3.0 release is that DI/1 (and AOP/1) is fully integrated. FW/1 itself moves from <code>org.corfield.framework</code> to <code>framework.one</code> alongside <code>framework.ioc</code> (DI/1), <code>framework.aop</code> (AOP/1), and some helper CFCs. <code>org.corfield.framework</code> still exists but will issue a deprecation warning if it is used. It will be removed in the final 3.0 release.</p>

<p>You can still place the FW/1 CFCs anywhere you want but if you move DI/1, you&rsquo;ll need to tell FW/1 where to find it &ndash; see below.</p>

<p>Previously, it was expected that you create a bean factory in your <code>Application.cfc</code> <code>setupApplication()</code> function and call FW/1&rsquo;s <code>setBeanFactory()</code> API to tell the framework about it. For some time, he conventional path to your <strong>Model</strong> CFCs has been <code>/model/beans</code> for your transient beans (domain objects) and <code>/model/services</code> for your singleton services (and perhaps <code>/model/gateways</code> for any data gateways, although those could just as easily live in your services folder too). That means you nearly always had the following code in <code>setupApplication()</code>:</p>

<pre><code>var bf = new framework.ioc( "model" );
setBeanFactory( bf );
</code></pre>

<p>Or, if you also managed your controllers this way, you may have had:</p>

<pre><code>var bf = new framework.ioc( "model,controllers" );
bf.addBean( "fw", this );
setBeanFactory( bf );
</code></pre>

<p>The <code>addBean()</code> call ensures that the bean factory knows <code>fw</code> is an alias for your bean factory so it will be available to any controller <code>init( any fw )</code> methods when they are constructed.</p>

<p>If you use subsystems, you probably had something similar in your <code>setupSubsystem()</code> function (and hopefully you set the default bean factory as a parent for each subsystem bean factory).</p>

<p>Now, FW/1 does this for you automatically. There are new configuration options to control the details, but the default cases <em>should just work</em> and you can remove your bean factory creation code from your <code>setupApplication()</code> function. Those options are:</p>

<ul>
<li><code>diEngine</code> &ndash; the type of the dependency injection engine: FW/1 knows about <strong>&ldquo;di1&rdquo;</strong>, <strong>&ldquo;aop1&rdquo;</strong>, and <strong>&ldquo;wirebox&rdquo;</strong>. The default is <strong>&ldquo;di1&rdquo;</strong>. You can also specify <strong>&ldquo;none&rdquo;</strong> to suppress the automatic bean factory machinery and <strong>&ldquo;custom&rdquo;</strong> if you want to tell FW/1 to use your own bean factory (see below). Note that ColdSpring is deliberately <em>not supported</em> as it is no longer maintained by anyone and has not been updated in years.</li>
<li><code>diComponent</code> &ndash; the default location of the bean factory CFC. For DI/1, this is <code>framework.ioc</code>; for AOP/1, this is <code>framework.aop</code>; and for WireBox, this is <code>framework.WireBoxAdapter</code>. If you move these files elsewhere, or setup a different mapping for them, set <code>diComponent</code> to that new location. If <code>diEngine</code> is <strong>&ldquo;custom&rdquo;</strong>, you can set <code>diComponent</code> to the dotted path of your bean factory for FW/1 to use it automatically.</li>
<li><code>diLocations</code> &ndash; the set of folders that DI/1, AOP/1, or WireBox will scan for CFCs. The default is <strong>&ldquo;model,controllers&rdquo;</strong> &ndash; note the relative paths! If you have these folders elsewhere (i.e., not relative to the application root), then you&rsquo;ll need to specify <code>diLocations</code>, e.g., as <code>"/model,/controllers"</code> or <code>"/myapp/model,/myapp/controllers"</code> or something similar.</li>
<li><code>diConfig</code> &ndash; additional configuration passed to DI/1, AOP/1, WireBox, or your custom bean factory. Specifically, this is the second argument to the constructor for DI/1 or AOP/1, and the <code>properties</code> argument to the constructor for WireBox, or the single argument to the constructor for your own bean factory. By default, it is an empty struct.</li>
</ul>


<h2>Additional Features</h2>

<p>In addition to the two major changes listed above, there are a number of minor enhancements compared to FW/1 2.5:</p>

<ul>
<li><code>isUnhandledRequest( string targetPath )</code> &ndash; a new API that you can override to tell FW/1 not to handle certain requests. By default, this returns <strong>true</strong> for certain file extensions and certain paths, as specified by the <code>unhandledExtensions</code> and <code>unhandledPaths</code> configuration values but you can choose to override this completely, or still call <code>super.isUnhandledRequest(targetPath)</code> and add additional conditions of your own.</li>
<li><code>redirectCustomURL( string uri, string preserve = 'none', statusCode = '302' )</code> &ndash; a new API that uses <code>buildCustomURL()</code> to construct a URL for a redirect.</li>
<li><code>buildCustomURL()</code> &ndash; now supports variable substitution: if <code>:varname</code> is present in the URI passed in and <code>rc.varname</code> exists and is a simple value, then that value will be substituted into the returned URL. To avoid confusion with subsystem paths, <code>:varname</code> will only be recognized if it follows one of: <code>/</code>, <code>?</code>, <code>=</code>, <code>&amp;</code>.</li>
<li><code>setLayout()</code> &ndash; now accepts an optional second argument, a <strong>boolean</strong>, that let&rsquo;s you tell FW/1 to automatically suppress any further layouts. This removes the need to specify <code>request.layouts = false</code> in your layout file.</li>
<li>Both DI/1 and FW/1 now try very hard to avoid attempting to autowire FW/1 itself (or the Application.cfc based on it, which acts as a global controller in a FW/1 application).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 2.5 Is Released!]]></title>
    <link href="http://framework-one.github.io/blog/2014/05/25/fw1-2-5-is-released/"/>
    <updated>2014-05-25T23:13:39-07:00</updated>
    <id>http://framework-one.github.io/blog/2014/05/25/fw1-2-5-is-released</id>
    <content type="html"><![CDATA[<p>This is a migration release to pave the way for breaking changes in Release 3.0. All examples have been updated to latest best practices and now use cfcscript exclusively. Examples use DI/1 0.5.0 to manage all beans and services (as <code>framework.ioc</code>), and no longer rely on start/end actions or the <code>service()</code> method.<!-- more --></p>

<p>As always, FW/1 can be downloaded from the <a href="http://fw1.riaforge.org">FW/1 page on RIAForge</a>. Release 2.5 is now the latest stable release of this framework, as it approaches its fifth birthday!</p>

<p>For a full list of all tickets closed in Release 2.5: <a href="https://github.com/framework-one/fw1/issues?milestone=14&amp;page=1&amp;state=closed">https://github.com/framework-one/fw1/issues?milestone=14&amp;page=1&amp;state=closed</a></p>

<h2>Migration from 2.2.1</h2>

<p>The <code>service()</code> call has been deprecated, as have start/end action items. Global access to <code>rc</code> in <code>Application.cfc</code> has also been deprecated. If you just drop 2.5 into your setup and you rely on these features, you&rsquo;ll get exceptions explaining how to enable these features for backward compatibility, namely add the following to your framework configuration:</p>

<pre><code>enableGlobalRC = true,
suppressServiceQueue = false
</code></pre>

<p>The ability to enable the implicit service calls is still present via:</p>

<pre><code>suppressImplicitService = false
</code></pre>

<p>but, like the other two options, defaults to disallowing the deprecated feature.</p>

<p>If you enable these deprecated features, you will no longer get exceptions using them, but you will see deprecation warnings in your application server&rsquo;s console log. This is to remind you to update your code in preparation for 3.0 later this year!</p>

<p><em>Please note that Release 3.0 will completely remove these backward compatibility options &ndash; and the associated deprecated features. In addition, <code>org.corfield.framework</code> will move to <code>framework.one</code> in Release 3.0, alongside <code>framework.ioc</code>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 the Year Ahead]]></title>
    <link href="http://framework-one.github.io/blog/2013/11/02/fw1-the-year-ahead/"/>
    <updated>2013-11-02T23:42:41-07:00</updated>
    <id>http://framework-one.github.io/blog/2013/11/02/fw1-the-year-ahead</id>
    <content type="html"><![CDATA[<p>With FW/1 Version 2.2 just around the corner &ndash; after a long time in incubation &ndash; and FW/1 itself being almost four and a half years old, it&rsquo;s a good time to look ahead at what&rsquo;s in store.<!-- more --></p>

<p>When FW/1 was first conceived, it was intended to be drop-dead simple and help on-board developers who were new to MVC and new to frameworks and also new to OOP. It leveraged conventions very heavily to encourage simple controller logic and delegation to a service layer for heavy lifting. That was the conceptual justification for the implicit service calls in the 1.x version and the ability to split controller methods in two &ndash; start/end-item &ndash; to wrap the automatic call to the service layer.</p>

<p>While that conceptual framework served its purpose admirably, users very quickly grew out of it and needed to start managing service calls more directly. That&rsquo;s why implicit service calls were no longer the default in 2.0 (although you could turn them back on). Even with that change, many users find the queuing of service calls confusing, even tho' controller calls are also queued (although that&rsquo;s mostly invisible to users).</p>

<p>In version 2.5, scheduled for early January 2014, FW/1 will begin the move away from queuing services by deprecating the <code>service()</code> call and requiring a configuration setting to enable its use in your application. In version 3.0, scheduled for release just after cf.Objective() 2014, the <code>service()</code> call will be removed. Along with that, the start/end-item calls will be deprecated in 2.5 and removed in 3.0, since they were only introduced in the first place to create the queued services workflow!</p>

<p>This means that users will need to manage services themselves and of course I recommend using a Dependency Injection framework for that (or at least using some sort of object factory as a bare minimum). Accordingly, DI/1 will have a higher profile in FW/1 2.5 and the two frameworks will be officially bundled together in 3.0. FW/1 will continue to support any bean factory that provides the <code>containsBean()</code> and <code>getBean()</code> API such as ColdSpring (WireBox uses a slightly different API but I plan to provide an adapter for it in 2.5).</p>

<p>Also as part of 3.0, the framework CFC itself will be renamed and the <code>/org/corfield</code> structure removed. The default path will be <code>/framework/one.cfc</code> so your <code>Application.cfc</code> will have <code>extends="framework.one"</code> by default. In 2.5, DI/1 will have adopted this pattern as <code>/framework/ioc.cfc</code>, but since 2.5 will still be backward compatible with 2.2 (after you&rsquo;ve added the compatibility setting in <code>Application.cfc</code>), I don&rsquo;t want to force renaming or reorganizing on users until 3.0.</p>

<p>Finally, as part of 3.0, the entire repository will be restructured to better reflect what is considered &ldquo;best practices&rdquo; in terms of where you install things and what lives in your webroot (only web-accessible assets!). This will make it easier to get started with the FW/1 skeleton application as a &ldquo;best practice&rdquo; out-of-the-box experience.</p>

<p>Note that the DI/1 and AOP/1 repositories will remain active but DI/1 versions will be in lockstep with FW/1 from 3.0 onward, and development will be conducted as part of the FW/1 repository, with releases being merged to the DI/1 repository. Once AOP/1 reaches a similar level of maturity, it will likely follow the same trajectory.</p>
]]></content>
  </entry>
  
</feed>
