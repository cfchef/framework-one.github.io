<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[FW/1 - The Invisible Framework]]></title>
  <link href="http://framework-one.github.io/atom.xml" rel="self"/>
  <link href="http://framework-one.github.io/"/>
  <updated>2014-08-18T14:26:35-07:00</updated>
  <id>http://framework-one.github.io/</id>
  <author>
    <name><![CDATA[Sean Corfield]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FW/1 3.0 Beta 1 Available]]></title>
    <link href="http://framework-one.github.io/blog/2014/08/18/fw1-3-0-beta-1-available/"/>
    <updated>2014-08-18T11:21:49-07:00</updated>
    <id>http://framework-one.github.io/blog/2014/08/18/fw1-3-0-beta-1-available</id>
    <content type="html"><![CDATA[<p>Just over four weeks ago, I released <a href="http://framework-one.github.io/blog/2014/07/20/fw1-3-0-alpha-1-available-for-testing/">FW/1 3.0 Alpha 1</a> and declared it <em>feature complete</em>. There were some big changes in that release and, in particular, some long-standing features were removed (after being deprecated in FW/1 2.5) and some recently-introduced features were also deprecated. Today I am releasing the first Beta version which includes bug fixes and usability enhancements, focusing primarily on DI/1 and AOP/1.<!-- more --></p>

<p>You can <a href="https://github.com/framework-one/fw1/releases/tag/v3.0-beta1">download FW/1 3.0 Beta 1 from Github</a> and that release page has a link to <a href="https://github.com/framework-one/fw1/issues?milestone=13&amp;page=1&amp;state=closed">the complete list of closed tickets in FW/1 3.0 Beta 1</a> and <a href="https://github.com/framework-one/di1/issues?milestone=1&amp;page=1&amp;state=closed">closed tickets in DI/1 that are for FW/1 3.0</a>. Note that those issues are only fixed in the FW/1 repository, not the DI/1 repository, but they will be backported later on.</p>

<h2>DI/1 and AOP/1 come of age</h2>

<p>As indicated above, the focus of Beta 1 has been on cleaning up DI/1 and AOP/1 to get them to a &ldquo;1.0&rdquo; release status as part of FW/1 3.0. Going forward, the DI/1 and AOP/1 repositories will only get updated with released versions and will be stripped down to minimal examples for those who wish to use them standalone. Future development (including issues and test cases etc) will all be done in the FW/1 repository.</p>

<p>DI/1 has been enhanced in this release to provide some features that will help developers migrating from ColdSpring (or who are looking for some of ColdSpring&rsquo;s more advanced features in DI/1).</p>

<p>AOP/1 has been rewritten to better integrate with DI/1 and ensure that injected beans are intercepted (the <code>beanProxy.cfc</code> needed only minor tweaks and it does the heavy lifting of interception).</p>

<p>Here is the full list of changes in DI/1 and AOP/1 (since Alpha 1):</p>

<ul>
<li>Dotted path deduction rewritten / improved <a href="https://github.com/framework-one/di1/issues/61">di1/#61</a>. There were a number of situations where DI/1 was unable to figure out a dotted component path for CFCs identified through relative folder paths, especially outside the primary webroot of an application. This should be addressed now!</li>
<li>New option <code>omitDirectoryAliases</code> &ndash; default <code>false</code> <a href="https://github.com/framework-one/di1/issues/64">di1/#64</a>. Set this <code>true</code> if you want to suppress the directory-based aliases that DI/1 creates (e.g., <code>beans/user.cfc</code> => <code>userBean</code>). This will enforce uniqueness of bean names (since the suffix will no longer differentiate beans with the same name in different folders).</li>
<li>IIS web server mapping case sensitivity <a href="https://github.com/framework-one/di1/issues/65">di1/#65</a>. A bug fix for an annoying edge case caused by IIS being case sensitive in a situation that caused hard-to-debug errors from DI/1.</li>
<li>AOP/1 now handles intercepted methods that return null <a href="https://github.com/framework-one/fw1/issues/264">#264</a>. Self-explanatory.</li>
<li>DI/1 now accepts a load listener as part of its configuration <a href="https://github.com/framework-one/fw1/issues/273">#273</a>. This was added to allow load listeners to be added easily via <code>diConfig</code> when using FW/1. A load listener is the recommended way to declare new beans, add aliases and additional beans and set up factory beans/methods (see next item).</li>
</ul>


<p>The following DI/1 setups are now equivalent:</p>

<pre><code>var bf1 = new framework.ioc( "..." );
bf1.onLoad( myListener );

var bf2 = new framework.ioc( "...", { loadListener = myListener } );
</code></pre>

<ul>
<li>DI/1 now supports factory beans / factory methods <a href="https://github.com/framework-one/fw1/issues/274">#274</a>. The new API <code>factoryBean()</code> allows you to specify that a bean should be obtained from another bean &ndash; the <em>factory bean</em> &ndash; by calling a specified method &ndash; the <em>factory method</em> &ndash; with optionally specified arguments, and optional bean value overrides (similar to the <code>declareBean()</code> API).</li>
</ul>


<p>Here are some examples:</p>

<pre><code>bf.factoryBean( "a1Bean", "myFactory", "theMethod" );
// a1Bean = bf.getBean("myFactory").theMethod();
bf.factoryBean( "a2Bean", "yourFactory", "createIt", [ "dsn" ] );
// a2Bean = bf.getBean("yourFactory").createIt( bf.getBean("dsn") );
bf.factoryBean( "a3Bean", "warehouse", "builder", [ "dsn", "config" ],
    { dsn = "myDB" } );
// a3Bean = bf.getBean("warehouse").builder( "myDB", bf.getBean("config") );
</code></pre>

<ul>
<li>DI/1 now supports a post-injection <em>init-method</em> like ColdSpring <a href="https://github.com/framework-one/fw1/issues/275">#275</a>. A new configuration option <code>initMethod</code> allows you to specify a no-argument method that DI/1 should attempt to call on all managed beans after all of their dependencies have been injected. This allows beans to perform additional configuration that requires access to their injected dependencies, which cannot be performed in a constructor. You can thank Daniel Budde II for this feature being added (and for spurring me to finally add factory beans/methods which I&rsquo;d been thinking about for a while)!</li>
<li>AOP/1 now intercepts injected beans <a href="https://github.com/framework-one/fw1/issues/277">#277</a>. This was the rewrite of AOP/1 to hook into DI/1&rsquo;s <code>resolveBean()</code> method via a new <code>setupInitMethod()</code> extension point (which will make additional extensions to DI/1 easier). Previously AOP/1 only intercepted beans obtained directly via <code>getBean()</code>. Thank you to Daniel Budde II for identifying this issue and providing a test case to help debug and verify the new behavior.</li>
<li>DI/1 no longer resolves beans multiple times <a href="https://github.com/framework-one/fw1/issues/279">#279</a>. This was a performance issue but previously harmless. With the enhancements to AOP/1, this introduced several bugs (hopefully all fixed now!).</li>
</ul>


<h2>FW/1 bug fixes and enhancements</h2>

<p>Here are the changes in FW/1 itself since Alpha 1:</p>

<ul>
<li>Controllers are reloaded after the bean factory is updated <a href="https://github.com/framework-one/fw1/issues/276">#276</a>. Previously, FW/1 cached controllers and recreating the bean factory was not sufficient to pick up changes in controller files. Now, when you call <code>setBeanFactory()</code>, the controller cache is cleared so controllers will be reloaded and any changes will be picked up (regardless of whether controllers are managed by FW/1 or DI/1).</li>
</ul>


<h2>The road to gold</h2>

<p>The next milestone should be Release Candidate 1 and only bug fixes are likely to be considered at this point, no new features or enhancements, unless they are required to make the Beta feature set fully usable. If all goes well, RC1 should be released in about 3-4 weeks, and the <em>gold</em> 3.0 release about 3-4 weeks after that (late September / early October).</p>

<p>Note that <code>org.framework.corfield</code> is a deprecated path for FW/1 &ndash; it has moved to <code>framework.one</code> &ndash; and whilst it is supported during the 3.0 prerelease builds, it will be removed in the gold release. Similarly, as noted in the Alpha 1 blog post, <code>getRC()</code> and <code>getRCValue()</code> are deprecated and will also be removed in the gold release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.0 Alpha 1 Available for Testing!]]></title>
    <link href="http://framework-one.github.io/blog/2014/07/20/fw1-3-0-alpha-1-available-for-testing/"/>
    <updated>2014-07-20T18:14:24-07:00</updated>
    <id>http://framework-one.github.io/blog/2014/07/20/fw1-3-0-alpha-1-available-for-testing</id>
    <content type="html"><![CDATA[<p>I consider FW/1 3.0 to be <em>feature complete</em> at this point so I am releasing Alpha 1 for testing. I expect people to run into a few bugs &ndash; this release has some big changes in it, compared to the 2.x release stream &ndash; and it&rsquo;s possible that new feature requests will crop up during alpha testing, but everything I wanted to change is in place.<!-- more --></p>

<p>You can <a href="https://github.com/framework-one/fw1/releases/tag/v3.0-alpha1">download FW/1 3.0 Alpha 1 from Github</a> and that release page has a link to <a href="https://github.com/framework-one/fw1/issues?milestone=13&amp;page=1&amp;state=closed">the complete list of closed tickets in FW/1 3.0 Alpha 1</a> although I&rsquo;m going to summarize the most important ones in this blog post.</p>

<h2>Features Removed</h2>

<p>First and foremost, some features that have been part of FW/1 from the early days have been removed. These features were deprecated in FW/1 2.5 as a migration path so I would strongly advise anyone still on FW/1 2.2.1 (or earlier) to upgrade to 2.5 in preparation for the (breaking) changes in 3.0!</p>

<p>These features include the <code>service()</code> API call and the <code>start*()</code> and <code>end*()</code> item handlers within controllers, as well as global references to <code>rc</code> (where it was not passed as an argument or made available in a view automatically). You can read more about the deprecation (and now removal) of these features in <a href="http://framework-one.github.io/blog/2014/05/25/fw1-2-5-is-released/">the release announcement for FW/1 2.5</a> on this blog. Management of services via a bean factory, with property-based injection, and direct invocation has long been considered a much better way to interact with services than using the &ldquo;service queue&rdquo; that FW/1 originally provided.</p>

<p>In addition, the recently added <code>getRC()</code> and <code>getRCValue()</code> API calls &ndash; added in FW/1 2.5 during the deprecation of global references to <code>rc</code> &ndash; have been deprecated <em>and will be removed in the final FW/1 3.0 release</em>. They were hastily added and they were unnecessary. In this alpha release, their use will trigger an exception explaining what to use instead. You can add:</p>

<pre><code>framework.enableLegacyRCAccessors = true
</code></pre>

<p>to your configuration while you update your code (this will suppress the exception but still write a message to your application server&rsquo;s console output &ndash; just as the deprecation process did in FW/1 2.5).</p>

<h2>Automatic Bean Factory Usage</h2>

<p>The other big change in this 3.0 release is that DI/1 (and AOP/1) is fully integrated. FW/1 itself moves from <code>org.corfield.framework</code> to <code>framework.one</code> alongside <code>framework.ioc</code> (DI/1), <code>framework.aop</code> (AOP/1), and some helper CFCs. <code>org.corfield.framework</code> still exists but will issue a deprecation warning if it is used. It will be removed in the final 3.0 release.</p>

<p>You can still place the FW/1 CFCs anywhere you want but if you move DI/1, you&rsquo;ll need to tell FW/1 where to find it &ndash; see below.</p>

<p>Previously, it was expected that you create a bean factory in your <code>Application.cfc</code> <code>setupApplication()</code> function and call FW/1&rsquo;s <code>setBeanFactory()</code> API to tell the framework about it. For some time, he conventional path to your <strong>Model</strong> CFCs has been <code>/model/beans</code> for your transient beans (domain objects) and <code>/model/services</code> for your singleton services (and perhaps <code>/model/gateways</code> for any data gateways, although those could just as easily live in your services folder too). That means you nearly always had the following code in <code>setupApplication()</code>:</p>

<pre><code>var bf = new framework.ioc( "model" );
setBeanFactory( bf );
</code></pre>

<p>Or, if you also managed your controllers this way, you may have had:</p>

<pre><code>var bf = new framework.ioc( "model,controllers" );
bf.addBean( "fw", this );
setBeanFactory( bf );
</code></pre>

<p>The <code>addBean()</code> call ensures that the bean factory knows <code>fw</code> is an alias for your bean factory so it will be available to any controller <code>init( any fw )</code> methods when they are constructed.</p>

<p>If you use subsystems, you probably had something similar in your <code>setupSubsystem()</code> function (and hopefully you set the default bean factory as a parent for each subsystem bean factory).</p>

<p>Now, FW/1 does this for you automatically. There are new configuration options to control the details, but the default cases <em>should just work</em> and you can remove your bean factory creation code from your <code>setupApplication()</code> function. Those options are:</p>

<ul>
<li><code>diEngine</code> &ndash; the type of the dependency injection engine: FW/1 knows about <strong>&ldquo;di1&rdquo;</strong>, <strong>&ldquo;aop1&rdquo;</strong>, and <strong>&ldquo;wirebox&rdquo;</strong>. The default is <strong>&ldquo;di1&rdquo;</strong>. You can also specify <strong>&ldquo;none&rdquo;</strong> to suppress the automatic bean factory machinery and <strong>&ldquo;custom&rdquo;</strong> if you want to tell FW/1 to use your own bean factory (see below). Note that ColdSpring is deliberately <em>not supported</em> as it is no longer maintained by anyone and has not been updated in years.</li>
<li><code>diComponent</code> &ndash; the default location of the bean factory CFC. For DI/1, this is <code>framework.ioc</code>; for AOP/1, this is <code>framework.aop</code>; and for WireBox, this is <code>framework.WireBoxAdapter</code>. If you move these files elsewhere, or setup a different mapping for them, set <code>diComponent</code> to that new location. If <code>diEngine</code> is <strong>&ldquo;custom&rdquo;</strong>, you can set <code>diComponent</code> to the dotted path of your bean factory for FW/1 to use it automatically.</li>
<li><code>diLocations</code> &ndash; the set of folders that DI/1, AOP/1, or WireBox will scan for CFCs. The default is <strong>&ldquo;model,controllers&rdquo;</strong> &ndash; note the relative paths! If you have these folders elsewhere (i.e., not relative to the application root), then you&rsquo;ll need to specify <code>diLocations</code>, e.g., as <code>"/model,/controllers"</code> or <code>"/myapp/model,/myapp/controllers"</code> or something similar.</li>
<li><code>diConfig</code> &ndash; additional configuration passed to DI/1, AOP/1, WireBox, or your custom bean factory. Specifically, this is the second argument to the constructor for DI/1 or AOP/1, and the <code>properties</code> argument to the constructor for WireBox, or the single argument to the constructor for your own bean factory. By default, it is an empty struct.</li>
</ul>


<h2>Additional Features</h2>

<p>In addition to the two major changes listed above, there are a number of minor enhancements compared to FW/1 2.5:</p>

<ul>
<li><code>isUnhandledRequest( string targetPath )</code> &ndash; a new API that you can override to tell FW/1 not to handle certain requests. By default, this returns <strong>true</strong> for certain file extensions and certain paths, as specified by the <code>unhandledExtensions</code> and <code>unhandledPaths</code> configuration values but you can choose to override this completely, or still call <code>super.isUnhandledRequest(targetPath)</code> and add additional conditions of your own.</li>
<li><code>redirectCustomURL( string uri, string preserve = 'none', statusCode = '302' )</code> &ndash; a new API that uses <code>buildCustomURL()</code> to construct a URL for a redirect.</li>
<li><code>buildCustomURL()</code> &ndash; now supports variable substitution: if <code>:varname</code> is present in the URI passed in and <code>rc.varname</code> exists and is a simple value, then that value will be substituted into the returned URL. To avoid confusion with subsystem paths, <code>:varname</code> will only be recognized if it follows one of: <code>/</code>, <code>?</code>, <code>=</code>, <code>&amp;</code>.</li>
<li><code>setLayout()</code> &ndash; now accepts an optional second argument, a <strong>boolean</strong>, that let&rsquo;s you tell FW/1 to automatically suppress any further layouts. This removes the need to specify <code>request.layouts = false</code> in your layout file.</li>
<li>Both DI/1 and FW/1 now try very hard to avoid attempting to autowire FW/1 itself (or the Application.cfc based on it, which acts as a global controller in a FW/1 application).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 2.5 Is Released!]]></title>
    <link href="http://framework-one.github.io/blog/2014/05/25/fw1-2-5-is-released/"/>
    <updated>2014-05-25T23:13:39-07:00</updated>
    <id>http://framework-one.github.io/blog/2014/05/25/fw1-2-5-is-released</id>
    <content type="html"><![CDATA[<p>This is a migration release to pave the way for breaking changes in Release 3.0. All examples have been updated to latest best practices and now use cfcscript exclusively. Examples use DI/1 0.5.0 to manage all beans and services (as <code>framework.ioc</code>), and no longer rely on start/end actions or the <code>service()</code> method.<!-- more --></p>

<p>As always, FW/1 can be downloaded from the <a href="http://fw1.riaforge.org">FW/1 page on RIAForge</a>. Release 2.5 is now the latest stable release of this framework, as it approaches its fifth birthday!</p>

<p>For a full list of all tickets closed in Release 2.5: <a href="https://github.com/framework-one/fw1/issues?milestone=14&amp;page=1&amp;state=closed">https://github.com/framework-one/fw1/issues?milestone=14&amp;page=1&amp;state=closed</a></p>

<h2>Migration from 2.2.1</h2>

<p>The <code>service()</code> call has been deprecated, as have start/end action items. Global access to <code>rc</code> in <code>Application.cfc</code> has also been deprecated. If you just drop 2.5 into your setup and you rely on these features, you&rsquo;ll get exceptions explaining how to enable these features for backward compatibility, namely add the following to your framework configuration:</p>

<pre><code>enableGlobalRC = true,
suppressServiceQueue = false
</code></pre>

<p>The ability to enable the implicit service calls is still present via:</p>

<pre><code>suppressImplicitService = false
</code></pre>

<p>but, like the other two options, defaults to disallowing the deprecated feature.</p>

<p>If you enable these deprecated features, you will no longer get exceptions using them, but you will see deprecation warnings in your application server&rsquo;s console log. This is to remind you to update your code in preparation for 3.0 later this year!</p>

<p><em>Please note that Release 3.0 will completely remove these backward compatibility options &ndash; and the associated deprecated features. In addition, <code>org.corfield.framework</code> will move to <code>framework.one</code> in Release 3.0, alongside <code>framework.ioc</code>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 2.2 Released!]]></title>
    <link href="http://framework-one.github.io/blog/2013/12/18/fw1-2-2-released/"/>
    <updated>2013-12-18T22:34:03-08:00</updated>
    <id>http://framework-one.github.io/blog/2013/12/18/fw1-2-2-released</id>
    <content type="html"><![CDATA[<p>Framework One version 2.2 is now available for production use! You can download it from the <a href="http://fw1.riaforge.org/">Framework One page on RIAForge</a>. This includes one bug fix over RC2 (interaction between <code>renderData()</code> and trace output).<!-- more --></p>

<p>The main focus of the 2.2 release is improved support for REST APIs, through the addition of <code>renderData()</code> to simplify returning JSON, XML and plain text results to the caller, as well as more sophisticated route handling via &ldquo;resource packs&rdquo; which let you define a family of related routes for a given resource type, using a shorthand notation. For more information, see this <a href="http://framework-one.github.io/blog/2013/11/03/fw1-releases-and-roadmap/">blog post about the latest FW/1 release and the roadmap</a>.</p>

<p>As noted previously, the master branch is the current stable release (2.2), and the develop branch has become the next release (2.5). 2.5 will be released next month and will be a stepping stone toward some substantial changes coming in 3.0. For more detail, read this <a href="http://framework-one.github.io/blog/2013/11/02/fw1-the-year-ahead">blog post explaining the changes coming in 2.5 and 3.0</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 Releases and Roadmap]]></title>
    <link href="http://framework-one.github.io/blog/2013/11/03/fw1-releases-and-roadmap/"/>
    <updated>2013-11-03T11:38:30-08:00</updated>
    <id>http://framework-one.github.io/blog/2013/11/03/fw1-releases-and-roadmap</id>
    <content type="html"><![CDATA[<p>Today I released the first <a href="https://github.com/framework-one/fw1/releases/tag/v2.2-rc1">FW/1 Version 2.2 Release Candidate</a> for testing. See below for the list of changes in this release, compared to Version 2.1. I also released a maintenance update for the old compatibility branch: <a href="https://github.com/framework-one/fw1/releases/tag/v1.3">FW/1 Version 1.3</a> (the &ldquo;Latest Release&rdquo; label is due to Github&rsquo;s view of the world, but it is the latest 1.x release). This is the version to use if you&rsquo;re on CFMX 7, CF 8, CF 9.0.0, Railo versions prior to 3.2, or OpenBD.<!-- more --></p>

<p>In addition to these two releases, I also added milestones (and dates!) for the next two FW/1 releases: 2.5 and 3.0. There are some fairly big changes coming, including some important breaking changes. I&rsquo;ll post a follow-up with more details on <strong>why</strong> these changes are coming, but you should read the <a href="https://github.com/framework-one/fw1/issues/milestones">FW/1 Roadmap</a> and start thinking about how these changes will affect you (as well as reading the next blog post, of course!).</p>

<p>As always, FW/1 wouldn&rsquo;t be possible without all the contributions from the community. This version includes contributions from John Berquist (regex caching in routes, resource packs in routes), Marco Betschart, Chris Blackwell, Peter Boughton, Will Coleda, Billy Cravens, Mark Drew, and all those who have provided feedback via the mailing list and Twitter and IM and&hellip; Thank you!</p>

<p>Here&rsquo;s a fairly complete change list for Version 2.2:</p>

<ul>
<li>#198 <code>renderData()</code> added for easier REST APIs</li>
<li>#197 resource pack support added to routes for easier REST APIs</li>
<li>#195 override <code>processRoutes()</code> to customize them (<code>addRoute()</code> is deprecated)</li>
<li>#192 regex in routes are now cached for improved performance</li>
<li>#181 improve null value support (Railo compatibility)</li>
<li>#179 can use <code>onMissingMethod()</code> for <code>injectFramework()</code></li>
<li>#176 <code>buildURL()</code> now correctly supports <code>?</code> at end of action</li>
<li>#175 subsystems automatically enabled if you specify subsystem configuration</li>
<li>#170 layout suppression is now correctly reset on an exception</li>
<li>#169 ensure <code>framework.home</code> is consistent with subsystem settings</li>
<li>#168 don&rsquo;t strip additional characters from start of path</li>
<li>#165 <code>onMissingView()</code> correctly called when view is missing</li>
<li>#163 trace code no longer fails if session scope is disabled</li>
<li>#160 <code>buildURL()</code> sanity checks <code>queryString</code> as struct</li>
</ul>


<p>Additional changes:</p>

<ul>
<li>fixed error message for service() missing action</li>
<li>framework initialization logic is more robust</li>
<li>improve example that uses DI/1 to avoid confusion over what to manage</li>
<li>improve consistency of framework injection (of itself)</li>
<li>layout trace shows correct path</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 the Year Ahead]]></title>
    <link href="http://framework-one.github.io/blog/2013/11/02/fw1-the-year-ahead/"/>
    <updated>2013-11-02T23:42:41-07:00</updated>
    <id>http://framework-one.github.io/blog/2013/11/02/fw1-the-year-ahead</id>
    <content type="html"><![CDATA[<p>With FW/1 Version 2.2 just around the corner &ndash; after a long time in incubation &ndash; and FW/1 itself being almost four and a half years old, it&rsquo;s a good time to look ahead at what&rsquo;s in store.<!-- more --></p>

<p>When FW/1 was first conceived, it was intended to be drop-dead simple and help on-board developers who were new to MVC and new to frameworks and also new to OOP. It leveraged conventions very heavily to encourage simple controller logic and delegation to a service layer for heavy lifting. That was the conceptual justification for the implicit service calls in the 1.x version and the ability to split controller methods in two &ndash; start/end-item &ndash; to wrap the automatic call to the service layer.</p>

<p>While that conceptual framework served its purpose admirably, users very quickly grew out of it and needed to start managing service calls more directly. That&rsquo;s why implicit service calls were no longer the default in 2.0 (although you could turn them back on). Even with that change, many users find the queuing of service calls confusing, even tho&#8217; controller calls are also queued (although that&rsquo;s mostly invisible to users).</p>

<p>In version 2.5, scheduled for early January 2014, FW/1 will begin the move away from queuing services by deprecating the <code>service()</code> call and requiring a configuration setting to enable its use in your application. In version 3.0, scheduled for release just after cf.Objective() 2014, the <code>service()</code> call will be removed. Along with that, the start/end-item calls will be deprecated in 2.5 and removed in 3.0, since they were only introduced in the first place to create the queued services workflow!</p>

<p>This means that users will need to manage services themselves and of course I recommend using a Dependency Injection framework for that (or at least using some sort of object factory as a bare minimum). Accordingly, DI/1 will have a higher profile in FW/1 2.5 and the two frameworks will be officially bundled together in 3.0. FW/1 will continue to support any bean factory that provides the <code>containsBean()</code> and <code>getBean()</code> API such as ColdSpring (WireBox uses a slightly different API but I plan to provide an adapter for it in 2.5).</p>

<p>Also as part of 3.0, the framework CFC itself will be renamed and the <code>/org/corfield</code> structure removed. The default path will be <code>/framework/one.cfc</code> so your <code>Application.cfc</code> will have <code>extends="framework.one"</code> by default. In 2.5, DI/1 will have adopted this pattern as <code>/framework/ioc.cfc</code>, but since 2.5 will still be backward compatible with 2.2 (after you&rsquo;ve added the compatibility setting in <code>Application.cfc</code>), I don&rsquo;t want to force renaming or reorganizing on users until 3.0.</p>

<p>Finally, as part of 3.0, the entire repository will be restructured to better reflect what is considered &ldquo;best practices&rdquo; in terms of where you install things and what lives in your webroot (only web-accessible assets!). This will make it easier to get started with the FW/1 skeleton application as a &ldquo;best practice&rdquo; out-of-the-box experience.</p>

<p>Note that the DI/1 and AOP/1 repositories will remain active but DI/1 versions will be in lockstep with FW/1 from 3.0 onward, and development will be conducted as part of the FW/1 repository, with releases being merged to the DI/1 repository. Once AOP/1 reaches a similar level of maturity, it will likely follow the same trajectory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where Can I Download Old Versions of FW/1?]]></title>
    <link href="http://framework-one.github.io/blog/2013/05/07/where-can-i-download-old-versions-of-fw1/"/>
    <updated>2013-05-07T14:18:12-07:00</updated>
    <id>http://framework-one.github.io/blog/2013/05/07/where-can-i-download-old-versions-of-fw1</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been asked this several times recently so I figured it was worth a blog post. First of, why would anyone want older versions of the framework? Well, if they&rsquo;re running on Adobe ColdFusion 9.0.0 or earlier, they can&rsquo;t use the 2.x release stream: they&rsquo;re stuck on 1.x. Also, if they&rsquo;re currently using an old version and don&rsquo;t want a major upgrade, they might want a minor upgrade for a bug fix.<!-- more --></p>

<p>Okay, so why haven&rsquo;t I blogged about this before? Truth be told, I thought it was &ldquo;obvious&rdquo; how to find specific legacy releases on any Github project. Apparently, it is not obvious for everyone so it is worth blogging about. Every properly managed project on Github tags every official release so that all past releases can be found on the &lsquo;tags&rsquo; page. You can see <a href="https://github.com/framework-one/fw1/tags">FW/1&rsquo;s &lsquo;tags&rsquo; page</a> where you can find every release since 1.0. Unfortunately, my choice of naming for tags has not always been consistent and I forgot the &lsquo;v&rsquo; prefix for a while around the release of 2.0. Oops. Unfortunately the typical naming convention for prereleases tends to sort them above their gold release versions &ndash; see <a href="https://github.com/clojure/core.logic/tags">Clojure&rsquo;s core.logic library&rsquo;s tags</a> for a more striking example. At least Github provides an easy mechanism for provided tagged archive releases.</p>

<p>It&rsquo;s probably worth pointing out that downloading FW/1 directly from the <a href="http://fw1.riaforge.org/">FW/1 RIAForge project page</a> will give you the latest stable release which is currently 2.1.1. That&rsquo;s because it downloads a ZIP file of the &ldquo;master&rdquo; branch from the Github site. All development is performed on the &ldquo;develop&rdquo; branch. The only time the RIAForge site will slip you something different is when a new release is in the Release Candidate stage and I update the RIAForge page to download a ZIP file of the &ldquo;develop&rdquo; branch &ndash; and I update the page to clearly state that! &ndash; and this is to increase adoption of the new release and help flush out any remaining bugs that haven&rsquo;t been caught during the alpha and beta testing phases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 Version 2.1 Released]]></title>
    <link href="http://framework-one.github.io/blog/2013/01/05/fw1-version-2-1-released/"/>
    <updated>2013-01-05T13:23:53-08:00</updated>
    <id>http://framework-one.github.io/blog/2013/01/05/fw1-version-2-1-released</id>
    <content type="html"><![CDATA[<p>FW/1 2.1 is now the official master release.</p>

<p>The develop branch has been merged to master and the &lsquo;v2.1&rsquo; tag has been added. Work on version 2.2 will soon start on the develop branch.<!-- more --></p>

<p>Version 2.1 has been a long time in the works. Version 2.0 was released in December 2011, just over a year ago. So what has been going on in Framework One Land since then? You can play along at home by reading <a href="https://github.com/seancorfield/fw1/commits/master">the commit list for the master branch</a>&hellip;</p>

<p>January 2012 saw version 2.0.1 appear with a fix for <code>buildUrl("")</code> which was broken just before the 2.0 gold release and caught by Seb Duggan. Thank you. January also saw a patch from Daryl Banttari to improve the performance of <code>expandPath()</code> by caching, similar to how <code>fileExists()</code> was handled.</p>

<p>February brought the start of FW/1&rsquo;s MXUnit-based test suite with some stellar work by Ryan Anklam. Ryan continued that work in March, June and July &ndash; thank you! March brought a pull request from John Whish to improve application startup behavior in the face of errors in user code. In June, Matt Quackenbush contributed a nice improvement to <code>redirect()</code>: support for HTTP status codes. In July, Ryan Anklam contributed to <code>populate()</code>, providing the ability to handle child objects automatically, and Giancarlo Gomez enhanced the regex support in routes. In August, I fixed a bug in autowiring bean factories when using subsystems which was identified by Marco Betschart, and then Marcin Szczepanski substantially expanded the test suite throughout August, September and October &ndash; much appreciated! In October, I fixed a bug in how <code>setView()</code> interfered with error handling, identified by Alex Purice, and then I worked on the test suite and I test-drove the development of the new &ldquo;environment control&rdquo; feature. Peter Boughton spotted that <code>setLayout()</code> did not work inside <code>onMissingView()</code> so I test-drove a fix for that. I added the <code>unhandledExceptionCaught</code> option so you can choose to rely on FW/1 for handling errors in requests that would otherwise be &lsquo;unhandled&rsquo; by the framework (thanks to &lsquo;stubotnik&rsquo; for that suggestion). Dave Ferguson identified a nasty bug in ColdFusion 10&rsquo;s WebSocket implementation that was causing him problems with FW/1 &ndash; which I fixed by copying <code>CGI</code> variables to the <code>request</code> scope. I cleaned up <code>request</code> scope usage and further improved FW/1&rsquo;s robustness in the face of errors at startup, due to user code problems. In November, Richard Herbert found a case where FW/1 failed if <code>session</code> scope was disabled (now fixed). December was then a busy month with the addition of the new tracing / debugging facility, ensuring HTTP status code 500 is set when an unhandled exception is reported, and various small bug fixes and code cleanup in the new features added. Thanx there to Nando Breiter, Marcin Szczepanski and Chris Blackwell for finding those bugs!</p>

<p>Thank you everyone for your contributions to FW/1 &ndash; I really appreciate the assistance in making the framework better for its community! As can be seen above, it really is a team effort.</p>

<p>In summary then, version 2.1 contains:</p>

<ul>
<li>Environment Control support.</li>
<li>Application tracing.</li>
<li><code>populate()</code> now handles child objects automatically.</li>
<li>Improved regex support in routes.</li>
<li>Addition of a nice test suite, making it easier to test-drive the development of new features, as well as ensure fewer regression bugs sneak in.</li>
<li><code>request</code> scope cleanup (and removal of several <code>request</code> variables that had previously been marked as deprecated.</li>
<li>Lots of small improvements to the robustness of application startup in the face of user code problems, making it easier to debug those problems, and several enhancements to error handling in general.</li>
</ul>


<p>You can <a href="http://fw1.riaforge.org/">download FW/1 2.1 at RIAForge</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 2.0 Released]]></title>
    <link href="http://framework-one.github.io/blog/2011/12/18/fw1-2-0-released/"/>
    <updated>2011-12-18T17:51:18-08:00</updated>
    <id>http://framework-one.github.io/blog/2011/12/18/fw1-2-0-released</id>
    <content type="html"><![CDATA[<p>After a long period of testing out in the wild FW/1 2.0 reached RC2 back in October and no further bugs have been reported. Only documentation remained and that has now been completed. FW/1 2.0 is gold and can be downloaded from <a href="http://fw1.riaforge.org/">FW/1&rsquo;s RIAForge site</a>. Happy Holidays!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 Comes to Clojure]]></title>
    <link href="http://framework-one.github.io/blog/2011/11/07/fw1-comes-to-clojure/"/>
    <updated>2011-11-07T17:53:44-08:00</updated>
    <id>http://framework-one.github.io/blog/2011/11/07/fw1-comes-to-clojure</id>
    <content type="html"><![CDATA[<p>After two years in the CFML world, FW/1 (Framework One) comes to Clojure!<!-- more --></p>

<p>Intended to bring the same simple, lightweight, convention-based MVC web application development that has proved so popular in the CFML world to the world of Clojure, <a href="https://github.com/framework-one/fw1-clj">FW/1 for Clojure</a> is available on Clojars (0.1.0, as of April 2012). If you clone the github repo, you&rsquo;ll see a &ldquo;user manager&rdquo; example application which is a port of the same app from the CFML version of the framework. The documentation is, as always, a work in progress but covers the basic API and how to create a driver program for the framework in Clojure. More information on the rationale, approach and API of FW/1 can be found on the <a href="https://github.com/framework-one/fw1/wiki">FW/1 (for CFML) wiki</a>. I plan to adapt this for the Clojure version shortly&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 Roadmap, DI/1 Etc]]></title>
    <link href="http://framework-one.github.io/blog/2011/03/19/fw1-roadmap/"/>
    <updated>2011-03-19T18:56:31-07:00</updated>
    <id>http://framework-one.github.io/blog/2011/03/19/fw1-roadmap</id>
    <content type="html"><![CDATA[<p>Last year I&rsquo;d talked about getting at least an alpha of FW/1 2.0 out the door by year end. It didn&rsquo;t happen. I was reminded of this on the <a href="http://groups.google.com/group/framework-one">FW/1 mailing list</a> the other day and I provided a fairly detailed response on the plans for FW/1. I figured, since I haven&rsquo;t blogged about FW/1 in a while, I should post that roadmap response on my blog as well.<!-- more --></p>

<h2>Is the 1.x version outdated?</h2>

<p>No, the 1.x stream will continue to be supported. It will get bug fixes but it will not get new feature &ndash; except where I want to provide a migration path for people moving to 2.0 (for example, if I remove certain things marked deprecated in the docs, I&rsquo;ll provide the new API in a 1.x build to make it easier for folks to transition to 2.0). Expect at least a 1.3 version, possibly more. These versions will continue to support CFMX7+ as well as the older versions of Railo and OpenBD that 1.2 currently runs on.</p>

<h2>Wasn&rsquo;t 2.0 imminent late last year?</h2>

<p>Yes, FW/1 2.0 was very imminent at that point but work and then conference preparations overwhelmed me and it got put on the back burner for a while, along with DI/1.</p>

<p>Since a respite is coming in my day job (World Singles) &ndash; we&rsquo;re launching the second phase of our new platform soon &ndash; and I have a couple of months before the next conference, I expect to get back on top of FW/1 2.0 soon and once an alpha of that is available, I&rsquo;ll work on DI/1 to get an alpha of that out as well. And then I&rsquo;ll probably focus on cfmljure for a while, as we start to add Clojure to our production code base at work. And then it&rsquo;ll be beta versions of FW/1 2.0 and DI/1 and cfmljure, round and round, until they&rsquo;re all three &ldquo;baked&rdquo; and ready for official releases.</p>

<h2>So DI/1 is coming?</h2>

<p>Yes, DI/1 is still on my radar &ndash; I have plans for it at work so it will definitely happen! It&rsquo;s just been delayed (ironically, by the pressures of work). Since FW/1 2.0, DI/1 1.0 and cfmljure 1.0 will all be used in my production code at work, you can expect them to receive regular updates once I actually get to the alpha releases!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 1.2 Available]]></title>
    <link href="http://framework-one.github.io/blog/2010/10/18/fw1-1-2-available/"/>
    <updated>2010-10-18T18:59:11-07:00</updated>
    <id>http://framework-one.github.io/blog/2010/10/18/fw1-1-2-available</id>
    <content type="html"><![CDATA[<p>The official 1.2 release of Framework One &ndash; FW/1 &ndash; has just been tagged and published on github. You can <a href="http://fw1.riaforge.org/">download it from RIAForge</a>.</p>

<p>Release Candidate 2 had been out for about a month with no issues reported. A few small enhancements were made since RC2. You can see the <a href="http://github.com/seancorfield/fw1/commits/master">list of commits</a> here, on github.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 Release 1.1 Available!]]></title>
    <link href="http://framework-one.github.io/blog/2010/06/11/fw1-release-1-1-available/"/>
    <updated>2010-06-11T19:02:00-07:00</updated>
    <id>http://framework-one.github.io/blog/2010/06/11/fw1-release-1-1-available</id>
    <content type="html"><![CDATA[<p>The latest stable release of Framework One is now available for <a href="https://github.com/framework-one/fw1/releases/tag/v1.1">download</a> from github! The previous stable release is still available on the tags page (<a href="https://github.com/framework-one/fw1/releases/tag/v1.0">download FW/1 1.0</a>).<!-- more --></p>

<p>This release features a large number of enhancements suggested by the community including:</p>

<ul>
<li>A skeleton application</li>
<li>The list of keys in <code>populate()</code> can contain spaces for improved readability</li>
<li>The delimiter for subsystems can be configured (the default is still <code>:</code>)</li>
<li>You can override the behavior when a view is missing by defining your own <code>onMissingView()</code> handler</li>
<li>The name of the application is automatically generated allowing you to omit <code>this.name</code> assignment in <code>Application.cfc</code></li>
<li>Controller calls can be queued up in <code>setupApplication()</code>, <code>setupSession()</code> and <code>setupRequest()</code> via the <code>controller()</code> API &ndash; <code>doController()</code> is officially deprecated</li>
<li><code>populate()</code> now works with CFCs that use generated setters or <code>onMissingMethod()</code> via the new <code>trustKeys</code> argument &ndash; and <code>onPopulateError()</code> to trap any errors that arise</li>
<li>Sample applications now work on installations with a non-empty context root (except for a couple clearly marked as such)</li>
<li>Skinning is possible via a new override point: <code>customizeViewOrLayoutPath()</code></li>
<li>When you queue up <code>service()</code> calls, you can now provide a struct of additional arguments so you add arguments that are not in the request context</li>
<li>The list of extensions and file paths that are ignored by FW/1 is now configurable (so you can easily allow certain parts of your application to operate outside the framework)</li>
<li>A new API <code>getConfig()</code> returns a readonly copy of the framework&rsquo;s configuration structure which may be useful in controllers</li>
<li>You can now override the view conventions easily in a controller via the new <code>setView()</code> API</li>
<li>The action arguments is now consistently optional in all of the getters for subsystem / section / item combinations</li>
<li>An example of security / access control with FW/1 has been added as a variant of the user manager</li>
<li><code>buildURL()</code> and <code>redirect()</code> can generate SES URLs via new FW/1 configuration settings: <code>generateSES</code> and <code>SESOmitIndex</code></li>
<li><code>buildURL()</code> and <code>redirect()</code> now all embedded query strings to make URL generation easier, as well as allowing control over which name/value pairs are folded into SES URLs vs regular query string format</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 - the Napkin Spec]]></title>
    <link href="http://framework-one.github.io/blog/2010/02/06/fw1-the-napkin-spec/"/>
    <updated>2010-02-06T18:09:11-08:00</updated>
    <id>http://framework-one.github.io/blog/2010/02/06/fw1-the-napkin-spec</id>
    <content type="html"><![CDATA[<p>A few folks have asked me to post the &ldquo;napkin&rdquo; on which I wrote the spec for FW/1. My &ldquo;napkin&rdquo; is actually Evernote because I have it on every computer and my iPhone so it&rsquo;s always with me and it&rsquo;s easy to develop notes with. I started the spec on July 17th and &ldquo;finished&rdquo; it on July 20th. The spec was titled &ldquo;New Lightweight Framework&rdquo;. Here&rsquo;s what it said:<!-- more --></p>

<blockquote><p>Goal: Create an extremely lightweight convention over configuration framework. Considerations:</p>

<ul>
<li>Leverage <code>Application.cfc</code> and lifecycle</li>
<li>Automatically call controller, model, view if appropriate</li>
<li>Autowire from bean factory?</li>
<li><code>Application.cfc</code> extends <code>org.corfield.X</code></li>
<li>Programmatically set everything, no XML</li>
<li><code>variables.framework</code> struct to specify everything</li>
<li><code>variables.framework.action</code> is URL / form variable for the, er, action, defaults to <code>'action'</code></li>
<li><code>variables.framework.home</code> is home action, defaults to <code>main.default</code>
fold URL / form into request.context</li>
<li><code>?action=section.item</code> maps to <code>controllers/section.cfc:item()</code> then <code>models/section.cfc:item()</code> then <code>views/section/item.cfm</code></li>
<li>implicit layouts based on actions</li>
</ul>


<p>Caveats:</p>

<ul>
<li>Should controller / model be instantiated every request or cached?</li>
<li>How should cache be refreshed?</li>
</ul>
</blockquote>

<p>That&rsquo;s it. I wrote the first version of FW/1 on July 19th. You can see the <a href="https://github.com/framework-one/fw1/blob/a686fd441ccd86e147f770f41b10f79a07be11f2/org/corfield/framework.cfc">original 381 line framework.cfc</a> on Github. So there you go: an insight into my design process!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 1.0 Released for 2010]]></title>
    <link href="http://framework-one.github.io/blog/2010/01/04/fw1-1-0-released-for-2010/"/>
    <updated>2010-01-04T18:23:40-08:00</updated>
    <id>http://framework-one.github.io/blog/2010/01/04/fw1-1-0-released-for-2010</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/framework-one/fw1/wiki/Reference-Manual">Reference Manual</a> has been completed so it&rsquo;s time to declare a 1.0 release for Framework One! Several people have already taken FW/1-powered applications to production, Javier Julio is soon to present the first user group session on FW/1! FW/1 has come of age and for companies that will only use official public releases, a 1.0 release may mean that more people will be able to try this lightweight, convention-based framework. Thank you to everyone who has contributed so far &ndash; for all the feedback, bug reports, blog posts and suggestions. Thank you in particular to Ryan Cogswell for contributing a lot of enhancements to the code and the subsystem implementation, Dutch Rapley for the Using Systems documentation, and Javier Julio for the User Manager sample applications. Thank you to AJ Mercer for submitting a talk to webDU and and Ray Camden for blogging about FW/1 and submitting a talk to cf.Objective().</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Framework One]]></title>
    <link href="http://framework-one.github.io/blog/2009/07/19/introducing-framework-one/"/>
    <updated>2009-07-19T19:26:21-07:00</updated>
    <id>http://framework-one.github.io/blog/2009/07/19/introducing-framework-one</id>
    <content type="html"><![CDATA[<p>The first question on everyone&rsquo;s mind is probably: why on earth would you create and publish yet another MVC application framework?<!-- more --></p>

<p>I&rsquo;ve become increasingly dissatisfied with the application frameworks out there. They&rsquo;re big, bloated, complex and, with one or two exceptions, they require XML configuration in some way or other. A discussion on the recently created <a href="http://groups.google.com/group/coldfusionoo">ColdFusion OO mailing list</a> (started in the wake of the verbal sparring match between Brian Kotek and Hal Helms), saw me admit this&hellip; ColdFusion&rsquo;s simplicity was being buried in the complexity of application frameworks and there was no simple on-ramp. Even Fusebox, the mainstay of ColdFusion application frameworks has become far too much for simple applications.</p>

<p>The second question is probably: why did you choose that name?</p>

<p>Years ago, I worked with a programming language called PL/1 (Programming Language One) which was intended to be the &ldquo;one language to rule them all&rdquo;, so to speak. I wanted to create a very small, simple framework. Something that involved only one core file if possible. Once I&rsquo;d built it, I needed a name for my one file framework&hellip; FW/1 seemed like a good pun.</p>

<p>The third question is going to be: why should I care and why should I use it?</p>

<p>If you&rsquo;re happy with an existing framework, keep using and feel free to ignore FW/1. If you haven&rsquo;t picked a framework yet because they all seem so complex, maybe FW/1 is for you. If, like me, you&rsquo;re tired of framework bloat, try FW/1 and give me your feedback.</p>

<p>I&rsquo;ll be posting some examples as blog posts as well as building out the project wiki over the coming weeks. I built FW/1 in a few hours. It&rsquo;s a single CFC. It&rsquo;s 400 lines of code &ndash; including comments. It&rsquo;s entirely convention based. It supports controllers (CFCs), services (CFCs), views (.cfm) and layouts (.cfm). URL/form actions take the form section.item and FW/1 will look for section.cfc (controller and service) and section/item.cfm (view and layouts). It optionally supports your favorite bean factory (ColdSpring, Lightwire and any other IoC container that implements getBean() and containsBean() methods). If you use a bean factory, it will autowire your controllers and services &ndash; or your controllers and/or services can be managed by the bean factory.</p>
]]></content>
  </entry>
  
</feed>
