<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[FW/1 - The Invisible Framework]]></title>
  <link href="http://framework-one.github.io/atom.xml" rel="self"/>
  <link href="http://framework-one.github.io/"/>
  <updated>2016-05-11T14:33:27-07:00</updated>
  <id>http://framework-one.github.io/</id>
  <author>
    <name><![CDATA[Sean Corfield]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FW/1 4.0.0 Alpha 1]]></title>
    <link href="http://framework-one.github.io/blog/2016/03/05/fw1-4-0-0-alpha-1/"/>
    <updated>2016-03-05T17:00:00-08:00</updated>
    <id>http://framework-one.github.io/blog/2016/03/05/fw1-4-0-0-alpha-1</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/framework-one/fw1/releases/tag/v4.0.0-alpha1">FW/1 4.0.0 Alpha 1</a> is available. At this point FW/1 4.0.0 is feature complete – there may be a few very minor changes between now and the Beta, and then only bug fixes through the RC phase. We’ve been using this <strong>develop</strong> version in production at work all along so I consider it solid enough for serious work.<!-- more --></p>

<p>The focus of the 4.0 release is on improving REST support. Improvements include:</p>

<ul>
  <li>JSON-encoded POST body support.</li>
  <li>Controllers have easy access to HTTP headers.</li>
  <li>Builder syntax for <code>renderData()</code> result elements.</li>
  <li>Support for user-supplied rendering functions.</li>
  <li>Integrated support for HTTP <code>OPTIONS</code> verb.</li>
  <li>Per-resource error handling.</li>
  <li>Setting status text (in addition to status code) in HTTP responses.</li>
  <li>Wildcard HTTP method support.</li>
</ul>

<p>In addition, DI/1 has had a number of enhancements, including the addition of a builder syntax for programmatically declaring beans.</p>

<p>For more detail, read the <a href="http://framework-one.github.io/documentation/4.0/changes.html">Change Log for FW/1 4.0</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 4.0 and Beyond]]></title>
    <link href="http://framework-one.github.io/blog/2016/01/05/fw1-4-0-and-beyond/"/>
    <updated>2016-01-05T22:20:00-08:00</updated>
    <id>http://framework-one.github.io/blog/2016/01/05/fw1-4-0-and-beyond</id>
    <content type="html"><![CDATA[<p>Happy New Year and Welcome to 2016!</p>

<p>FW/1 3.5 has been out for a few months now and I want to talk about what’s coming this year.<!-- more -->
FW/1 4.0 is well under way and the themes are REST APIs and enhancements to DI/1. You can read <a href="http://framework-one.github.io/documentation/4.0/changes.html">the FW/1 4.0 change log</a> here to see how much has been done so far. There are <a href="https://github.com/framework-one/fw1/issues?q=is%3Aopen+is%3Aissue+milestone%3A4.0">only a few issues left for 4.0</a> so we’re close to the first Alpha release at this point.</p>

<p>Why the 4.0 version? A major version number change indicates breaking changes. 4.0 drops support for Adobe ColdFusion 9.0.x because it relies on closures. Frankly, I’d like to drop support for Adobe ColdFusion 10 so I could rely on using member functions, but I feel it’s important to support two major versions. Just bear in mind that Raijin – ColdFusion 2016 – is coming and when that’s released, I will drop support for ACF10!</p>

<p>Aside from the minimum version support, FW/1 4.0 includes a (potentially) breaking change around <code>property</code> declarations: if a <code>property</code> includes a type or default, it will no longer be considered for injection. In FW/1 3.5, typed properties could be excluded if you specified <code>omitTypedProperties : true</code>. That is the default in 4.0 so you can still restore the earlier behavior. In addition, 4.0 now ignores defaulted properties but you can specify <code>omitDefaultedProperties : false</code> to override that new behavior.</p>

<p>The next planned version of FW/1 will be 4.5 – a fairly major release that will pave the way for 5.0, in the same way 2.5 paved the way for 3.0. In 5.0, the request lifecycle methods will move from <code>Application.cfc</code> (or your custom CFC that extends <code>framework.one</code> in the <strong>Alternative Application Structure</strong>) to a separate CFC, and subsystems will also be able to specify a request lifecycle with a <code>subsystem.cfc</code> – and subsystems with such a CFC will be eagerly loaded at application startup (whereas subsystems are lazily loaded today). In order to provide a smooth upgrade path, FW/1 4.5 will support most of those features but disabled by default and will provide warnings or throw exceptions if the behavior would change in 5.0.</p>

<p>As always, I want FW/1 to be driven by your needs so please raise issues on the <a href="http://groups.google.com/group/framework-one/">mailing list</a> or on <a href="https://github.com/framework-one/fw1">GitHub</a> so that your voices are heard and can drive future versions of one of CFML’s most popular MVC/DI/AOP frameworks!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.5.0 Released!]]></title>
    <link href="http://framework-one.github.io/blog/2015/10/21/fw1-3-5-0-released/"/>
    <updated>2015-10-21T12:00:00-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/10/21/fw1-3-5-0-released</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/framework-one/fw1/releases/tag/v3.5.0">Gold Release of FW/1 3.5.0</a> is available for general release and production use. The focus of this release is integration, bringing an improved way to add subsystems to an existing application, an easier way to add FW/1 to a legacy application, support for mixed CFML / Clojure applications, better support for WireBox, and full support for ForgeBox and CommandBox!<!-- more --></p>

<p>The major new features in FW/1 3.5.0 are:</p>

<ul>
  <li>Subsystems 2.0. A new, more streamlined way to add subsystems to an existing FW/1 application has been added. Thank you to <a href="https://github.com/sneiland">Steven Neiland</a> for the inspiration and guiding principles! Read about <a href="http://framework-one.github.io/documentation/using-subsystems.html">Subsystems 2.0</a> and how they differ from the older approach (which is still supported). The examples have been reworked to use Subsystems 2.0 so you can see how it works in practice.</li>
  <li>An <strong>Alternative Application Structure</strong> is now supported that allows you to create FW/1 applications that do not require <code>Application.cfc</code> extends the FW/1 component. Read about <a href="http://framework-one.github.io/documentation/developing-applications.html#alternative-application-structure">the Alternative Application Structure</a>. Some of the examples have been updated to use this approach so you can see how it works in practice.</li>
  <li>Clojure integration. If you have Leiningen installed (Clojure’s build tool) then it is very easy to write services and/or controllers in Clojure and have FW/1 automatically integrate those into your CFML application. Read about <a href="http://framework-one.github.io/documentation/cfml-and-clojure.html">mixing CFML &amp; Clojure</a> for more details. An example of Clojure integration is provided in the repository (you’ll need <a href="http://leiningen.org">Leiningen</a> installed for that example to run).</li>
  <li>ForgeBox / CommandBox support. FW/1 now has a <code>box.json</code> file and is hosted on ForgeBox so it can be easily installed via CommandBox.</li>
</ul>

<p>In addition to the major features, the following enhancements have been added:</p>

<ul>
  <li><code>redirect()</code> allows <code>queryString</code> to be a struct, like <code>buildURL()</code>.</li>
  <li><code>isFrameworkReloadRequest()</code> is now public in case an application needs to take action when the framework is reloaded.</li>
  <li><code>getSubsystemSectionAndItem()</code> added to supplement <code>getFullyQualifiedAction()</code> (the latter omits the subsystem if it is empty).</li>
  <li>The WireBox adapter now supports custom binders.</li>
  <li>The conventions used for various folder names can now be overridden in the framework configuration.</li>
</ul>

<p>And the following bugs have been fixed:</p>

<ul>
  <li><a href="https://github.com/framework-one/fw1/issues/377">377</a> - AOP/1 now allows a single interceptor to be applied to multiple objects.</li>
  <li><a href="https://github.com/framework-one/fw1/issues/361">361</a> - <code>renderData()</code> could kill sessions (this was backported to 3.1.1).</li>
  <li><a href="https://github.com/framework-one/fw1/issues/336">336</a> - account for <code>expandPath()</code> returning the wrong directory on ACF11 when the path has a trailing <code>/</code>.</li>
</ul>

<p>Finally, FW/1 includes experimental support for Lucee Language, so if you are running a prerelease build of Lucee Server that has Lucee Language support enabled, you can write controllers and views etc in <code>.lc</code> or <code>.lucee</code> files and FW/1 will use them.</p>

<p>You can read the <a href="https://github.com/framework-one/fw1/issues?q=is%3Aissue+milestone%3A3.5+is%3Aclosed">full list of changes since 3.1</a> on GitHub, along with
<a href="https://github.com/framework-one/fw1/pulls?q=is%3Apr+is%3Aclosed+milestone%3A3.5">accepted pull requests since 3.1</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.5.0 Release Candidate 2 Available!]]></title>
    <link href="http://framework-one.github.io/blog/2015/10/06/fw1-3-5-0-rc-2/"/>
    <updated>2015-10-06T15:40:00-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/10/06/fw1-3-5-0-rc-2</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/framework-one/fw1/releases/tag/v3.5.0-rc2">second Release Candidate of FW/1 3.5.0</a> is available for testing.</p>

<p>This Release Candidate contains a few bug fixes discovered since Release Candidate 1 and is now the <a href="http://fw1.riaforge.org">default download from FW/1’s RIAForge page</a>.
I consider this stable enough to evaluate for production usage at this point – I expect this RC to be the Gold Release unless end user testing uncovers a showstopping issue in the next week or two!</p>

<p>You can read the <a href="https://github.com/framework-one/fw1/issues?q=is%3Aissue+milestone%3A3.5+is%3Aclosed">full list of changes since 3.1</a> on GitHub, along with
<a href="https://github.com/framework-one/fw1/pulls?q=is%3Apr+is%3Aclosed+milestone%3A3.5">accepted pull requests since 3.1</a>..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.5.0 Release Candidate 1 Available!]]></title>
    <link href="http://framework-one.github.io/blog/2015/09/22/fw1-3-5-0-rc-1/"/>
    <updated>2015-09-22T12:35:00-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/09/22/fw1-3-5-0-rc-1</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/framework-one/fw1/releases/tag/v3.5.0-rc1">first Release Candidate of FW/1 3.5.0</a> is available for testing.</p>

<p>This Release Candidate contains just bug fixes since Beta 2. Beta 2 contained mostly bug fixes since Beta 1, with one small enhancement to DI/1 (<code>liberal</code> plural support, e.g., <code>libraries</code> becomes <code>library</code>).</p>

<p>You can read the <a href="https://github.com/framework-one/fw1/issues?q=is%3Aissue+milestone%3A3.5+is%3Aclosed">full list of changes since 3.1</a> on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.5.0 Beta 1 Available!]]></title>
    <link href="http://framework-one.github.io/blog/2015/09/10/fw1-3-5-0-beta-1/"/>
    <updated>2015-09-10T13:35:00-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/09/10/fw1-3-5-0-beta-1</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/framework-one/fw1/releases/tag/v3.5.0-beta1">first Beta release of FW/1 3.5.0</a> is available for testing.</p>

<p>The focus of this release is integration:<!--more--></p>

<ul>
  <li>Support for controllers and services to be written in CFML (<code>.cfc</code>), Clojure (<code>.clj</code>), or Lucee (<code>.lucee</code>)</li>
  <li>Support for views and layouts to be written in CFML (<code>.cfm</code>) or Lucee (<code>.lucee</code>)</li>
  <li>Configurable folder names to set your own conventions (for <em>controllers</em>, <em>layouts</em>, <em>subsystems</em>, and <em>views</em>)</li>
  <li>Support for <code>Application.cfc</code> to use FW/1 without extending <code>framework.one</code></li>
  <li>A new, cleaner, more consistent set of conventions for adding subsystems to an existing application</li>
</ul>

<p>You can read the <a href="https://github.com/framework-one/fw1/issues?q=is%3Aissue+milestone%3A3.5+is%3Aclosed">full list of changes since 3.0</a> on GitHub.</p>

<p>The <a href="http://framework-one.github.io/documentation/3.5/">documentation for 3.5</a> has been completely overhauled with complete descriptions of all the new features, as well as many
clarifications and expansions of existing features. In particular, you’ll want to check out:</p>

<ul>
  <li><a href="http://framework-one.github.io/documentation/3.5/developing-applications.html#alternative-application-structure">Alternative Application Structure</a></li>
  <li><a href="http://framework-one.github.io/documentation/3.5/using-subsystems.html#subsystems-10-vs-20">Subsystems 1.0 vs 2.0</a></li>
  <li><a href="http://framework-one.github.io/documentation/3.5/cfml-and-clojure.html">Using Clojure with CFML</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 Out of the Box]]></title>
    <link href="http://framework-one.github.io/blog/2015/09/06/out-of-the-box/"/>
    <updated>2015-09-06T23:00:00-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/09/06/out-of-the-box</id>
    <content type="html"><![CDATA[<p>FW/1 is up on <a href="http://www.coldbox.org/forgebox">ForgeBox</a>. ForgeBox is the npm / Maven of the CFML world. If you haven’t heard about it – or you think it’s only for “Box” products – you need to check it out! It’s a repository for CFML projects that can be easily installed via <a href="https://www.ortussolutions.com/products/commandbox">Command Box</a>. Wait! You haven’t heard of that either? Gosh, you’ve got some reading to do! It’ll change the way you do development!</p>

<p>Go get it installed, then read on!<!--more--></p>

<p>Now you have <code>box</code> installed, here’s how to get up and running with FW/1 easily:</p>

<pre><code>&gt; box
CommandBox:mydir&gt; install fw1-commands
... you only need to do this once ...
CommandBox:mydir&gt; mkdir example
CommandBox:mydir&gt; cd example
CommandBox:example&gt; fw1 create app example basic
CommandBox:example&gt; install fw1
... installs stable 3.1.2 version ...
CommandBox:example&gt; start
</code></pre>

<p>At this point it’ll open a browser running your new skeleton FW/1 app. Happy coding!</p>

<p>Note that you don’t need to have installed a CFML server, or set up a webroot - <code>box</code> can start a CFML server in any directory so you can get up and running quickly!</p>

<p>You can check out the various <a href="https://github.com/framework-one/fw1-commands">FW/1 commands</a> available inside <code>box</code> but, like Ruby on Rails, they let you quickly add new controllers, views, subsystems and so on to your application. Huge kudos to Tony Junkes for contributing this to the FW/1 family of projects!</p>

<p>Going forward, my plan is that <code>install fw1</code> will always install the current stable (master) version — I just need to remember to keep it up to date! — and you can also install specific versions (currently <code>fw1-3.1.2</code> and <code>fw1-3.5.0</code>). The latter installs from the develop branch. Support for true multiple version installs is planned for <code>box</code>, possibly next month.</p>

<p>One of the things that is really nice about this is you can switch FW/1 versions as easily as:</p>

<pre><code>CommandBox:example&gt; uninstall fw1
CommandBox:example&gt; install fw1-3.5.0
</code></pre>

<p>Now your app is running 3.5.0 (Alpha 2) instead of the stable release!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 New Releases Etc]]></title>
    <link href="http://framework-one.github.io/blog/2015/09/06/fw1-news/"/>
    <updated>2015-09-06T22:25:00-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/09/06/fw1-news</id>
    <content type="html"><![CDATA[<p>A couple of months have passed since <a href="http://framework-one.github.io/blog/2015/07/12/fw1-3-1-released/">FW/1 3.1 was released</a> but things have been busy behind the scenes!</p>

<p>As indicated in July, work on FW/1 3.5 had been progressing in parallel (the first time two releases of FW/1 have been worked on concurrently!) and you can already download <a href="https://github.com/framework-one/fw1/releases/tag/v3.5.0-alpha2">FW/1 3.5 Alpha 2</a>.
Yes, there was an <a href="https://github.com/framework-one/fw1/releases/tag/v3.5.0-alpha1">Alpha 1</a> as well, but as work progressed on the <a href="http://framework-one.github.io/documentation/3.5/">massively overhauled 3.5 documentation</a>, some important usability enhancements
appeared and a new alpha was released within 24 hours! In particular, the <a href="http://framework-one.github.io/documentation/3.5/cfml-and-clojure.html">Clojure and CFML Sitting in a Tree</a> section has been extensively updated and includes a fully worked example of
how to create FW/1 application from scratch using the REPL to create Clojure services and controllers, with CFML views and layouts!</p>

<p>You’ll also probably notice that the FW/1 website has had a facelift, finally getting the look’n’feel that Kevin Stannard designed five years ago. Better late than never, and huge thanks to Kevin again for his wonderful logo design and choice of colors!
The 3.5 documentation now includes a table of contents on each page, making it easier to navigate (this will probably get backported to 3.1 and 3.0 at some point).</p>

<p>In addition to the ongoing work on FW/1 3.5, we also have an <a href="https://github.com/framework-one/fw1/releases/tag/v3.1.1">important bug fix release for the 3.1.x version</a> which addresses a potential problem with REST APIs.</p>

<p>Finally, if you’re a <a href="https://www.ortussolutions.com/products/commandbox">CommandBox</a> fan, we have good news: you can now easily install FW/1 3.1.2 and 3.5.0 (prerelease) via <code>box</code>. I’ll be blogging about this shortly. The 3.1.2 release is exactly the same as 3.1.1 (including the version number!)
but it includes <code>box.json</code> for compatibility with ForgeBox / CommandBox. In addition, Tony Junkes has contributed an <a href="https://github.com/framework-one/fw1-commands">initial set of <code>box</code> commands for FW/1</a> that let you get up and running quickly. This will be covered in the next blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.1 Released!]]></title>
    <link href="http://framework-one.github.io/blog/2015/07/12/fw1-3-1-released/"/>
    <updated>2015-07-12T20:00:00-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/07/12/fw1-3-1-released</id>
    <content type="html"><![CDATA[<p>The “gold” release of FW/1 3.1 (3.1.0) is now available for production use! You can <a href="https://github.com/framework-one/fw1/releases/tag/v3.1.0">download FW/1 3.1.0 from GitHub</a>.</p>

<p>FW 3.1 is a maintenance release of the 3.x series, containing a number of bug fixes and enhancements. The main new feature of release 3.1 is the addition of AOP/1, thanks to the tireless work of <a href="https://github.com/dbudde">Daniel Budde</a>.<!--more--></p>

<h2 id="aop1">AOP/1</h2>
<p>AOP/1 brings Aspect-Oriented Programming to FW/1 applications by extending the capabilities of DI/1 with “interceptors” that can be automatically woven into your beans to allow you to call additional methods before, after, or instead of (“around”) the native methods on your beans.
Please read <a href="http://framework-one.github.io/documentation/using-aop-one.html">the all new AOP/1 documentation</a> provided by Daniel Budde for more details on how to use this powerful new feature.</p>

<h2 id="enhancements">Enhancements</h2>

<ul>
  <li><code>renderData()</code> now supports both <code>html</code>, <code>rawjson</code> and <code>jsonp</code> data types.</li>
  <li><code>redirect()</code> now supports a <code>header</code> argument to allow for custom redirect-like behavior such as might be needed in a Single-Page-Application or heavy ajax usage.</li>
  <li>Routes:
    <ul>
      <li>Regex support for <code>^</code> to anchor the match to the start of the request string.</li>
      <li>Placeholders can now have matches restricted by regex patterns (e.g., to match numeric-only portions of the request string).</li>
      <li>Regex matching can now be made case-sensitive via the new <code>routesCaseSensitive</code> option.</li>
    </ul>
  </li>
  <li>Per-subsystem configuration now supports <code>diEngine</code>, <code>diComponent</code>, <code>diLocations</code>, and <code>diConfig</code>.</li>
  <li>Per-environment configuration is now merged recursively, including appropriate parts of <code>diConfig</code>.</li>
</ul>

<h2 id="bug-fixes">Bug Fixes</h2>

<ul>
  <li>Route matching for placeholders was too eager. Placeholder names are now restricted to alphanumeric plus <code>_</code> and <code>-</code> characters only. <em>This is potentially a breaking change if you have used unusual characters in placeholder variable names that are legal in CFML identifiers!</em></li>
  <li>If the first request to an application was also a reload request, initialization was sometimes attempted twice if an exception was thrown during initialization.</li>
  <li>Framework reloads were not always thread safe and could produce strange behavior if an application was reloaded under load.</li>
  <li>DI/1’s <code>isConstant()</code> method could fail for manually created and managed beans.</li>
  <li><code>Application.cfc</code> was not always correctly autowired as a Controller.</li>
  <li>If content had been produced in a request that used <code>renderData()</code>, that content could corrupt the result. A content reset is now performed in such cases.</li>
  <li>DI/1 no longer attempts to instantiate interfaces that it discovers in the model.</li>
</ul>

<h2 id="platform-support">Platform Support</h2>

<ul>
  <li>ColdFusion 9.0.1 and Railo 4.0 are no longer officially supported by FW/1. FW/1 3.1 applications will probably still run on them but there are some bugs in both engine versions that can impact some of the new functionality in this release.
FW/1 3.1 officially supports ColdFusion 9.0.2 or later, Railo 4.1 or later, and Lucee 4.5.1.000 or later.</li>
</ul>

<h2 id="code-of-conduct">Code of Conduct</h2>
<p>As part of my commitment to diversity in IT, Framework One now has a <a href="https://github.com/framework-one/fw1/blob/master/CODE_OF_CONDUCT.md">Code of Conduct</a> that encompasses all aspects of interaction with the project: on GitHub, on the mailing list, and in presentations given by community members to promote the framework.
This brings Framework in line with a number of progressive open source projects that have adopted a Code of Conduct as a way to make the open source software community more welcoming and more inclusive.</p>

<h2 id="contributors">Contributors</h2>
<p>The star contributor for this release is <a href="https://github.com/dbudde">Daniel Budde</a> for rewriting AOP/1 (twice!) so it is ready for inclusion with FW/1! Thank you!</p>

<p>Other contributors, in alphabetical order of GitHub name:</p>

<ul>
  <li>atuttle - Adam Tuttle</li>
  <li>cybersonic - Mark Drew</li>
  <li>GiancarloGomez - Giancarlo Gomez</li>
  <li>guillaume-boivin - Guillaume Boivin</li>
  <li>jcberquist - John Berquist</li>
  <li>jochemd - Jochem van Dieten</li>
  <li>Ronner</li>
  <li>ryanguill - Ryan Guill</li>
</ul>

<p>And, yeah, I did a bit too, but FW/1 wouldn’t be where it is today without contributions from the open source CFML community - thank you everyone!</p>

<h2 id="additional-information">Additional Information</h2>
<p>For a complete list of changes since 3.0:</p>

<ul>
  <li><a href="https://github.com/framework-one/fw1/issues?q=is%3Aissue+is%3Aclosed+milestone%3A3.1">Issues Closed</a></li>
  <li><a href="https://github.com/framework-one/fw1/pulls?q=is%3Apr+is%3Aclosed+milestone%3A3.1">Pull Requests Merged</a></li>
</ul>

<p>Release 3.5 Alpha 1 will follow shortly, with a focus on language integration, bringing
automatic support for Clojure code in the Model and Controllers, as well as first class support for the Lucee Language in the Model, the Views, and the Controllers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.1 Release Candidate 2 Available!]]></title>
    <link href="http://framework-one.github.io/blog/2015/07/07/fw1-3-1-rc-2/"/>
    <updated>2015-07-07T16:40:00-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/07/07/fw1-3-1-rc-2</id>
    <content type="html"><![CDATA[<p>The second Release Candidate of FW/1 3.1 is now available for testing. You <a href="https://github.com/framework-one/fw1/releases/tag/v3.1-rc2">download FW/1 3.1 RC 2 from GitHub</a>.</p>

<p>These are the changes since RC 1:</p>

<ul>
  <li>Major overhaul of AOP/1; intercept by CFC type; intercept by CFC name regex (Daniel Budde).</li>
  <li>Routes now support regex restriction on placeholder variables (Guillaume Boivin).</li>
</ul>

<p>For a complete list of changes since 3.0:</p>

<ul>
  <li><a href="https://github.com/framework-one/fw1/issues?q=is%3Aissue+is%3Aclosed+milestone%3A3.1">Issues Closed</a></li>
  <li><a href="https://github.com/framework-one/fw1/pulls?q=is%3Apr+is%3Aclosed+milestone%3A3.1">Pull Requests Merged</a></li>
</ul>

<p>At this point, release 3.1 should be considered “production ready” and only critical bug fixes will be included between now and the “gold” release. It is the default download on RIAForge and will be merged to master tomorrow in preparation for the final release at the weekend.</p>

<p>As noted before, release 3.5 will follow fairly quickly after that, with a focus on language integration, bringing
automatic support for Clojure code in the Model and Controllers, as well as first class support for the Lucee Language in the Model, the Views, and the Controllers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.1 Release Candidate 1 Available!]]></title>
    <link href="http://framework-one.github.io/blog/2015/06/28/fw1-3-1-rc-1/"/>
    <updated>2015-06-28T17:00:00-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/06/28/fw1-3-1-rc-1</id>
    <content type="html"><![CDATA[<p>The first Release Candidate of FW/1 3.1 is now available for testing. You <a href="https://github.com/framework-one/fw1/releases/tag/v3.1-rc1">download FW/1 3.1 RC 1 from GitHub</a>.</p>

<p>These are the changes since Beta 2:</p>

<ul>
  <li><code>renderData()</code> supports <code>"jsonp"</code> (Giancarlo Gomez) and <code>"html"</code>.</li>
  <li><code>renderData()</code> now causes a content reset before rendering the data (Giancarlo Gomez).</li>
  <li>Subsystem-specific configuration can now override <code>diEngine</code>, <code>diLocations</code>, and <code>diComponent</code>. Previously it could only override <code>diConfig</code>.</li>
  <li><code>setupApplication()</code> no longer runs twice when first request is also a reload request.</li>
</ul>

<p>For a complete list of changes since 3.0:</p>

<ul>
  <li><a href="https://github.com/framework-one/fw1/issues?q=is%3Aissue+is%3Aclosed+milestone%3A3.1">Issues Closed</a></li>
  <li><a href="https://github.com/framework-one/fw1/pulls?q=is%3Apr+is%3Aclosed+milestone%3A3.1">Pull Requests Merged</a></li>
</ul>

<p>At this point, release 3.1 is “feature complete” and only bug fixes will be included between now and the “gold” release. Release 3.5 will follow fairly quickly after that, with a focus on language integration, bringing
automatic support for Clojure code in the Model and Controllers, as well as first class support for the Lucee Language in the Model, the Views, and the Controllers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.1 Beta 2 Available!]]></title>
    <link href="http://framework-one.github.io/blog/2015/06/20/fw1-3-1-beta-2/"/>
    <updated>2015-06-20T00:59:49-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/06/20/fw1-3-1-beta-2</id>
    <content type="html"><![CDATA[<p>The second beta version of FW/1 3.1 is available for testing. Whilst this is a minor bug fix and enhancement release, it now includes the first major rewrite of AOP/1. Documentation will follow shortly. Massive thanks to Daniel Budde for the rewrite! You can <a href="https://github.com/framework-one/fw1/releases/tag/v3.1-beta2">download FW/1 3.1 Beta 2</a> from GitHub, as well as read the full release notes there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.1 Beta 1 Available!]]></title>
    <link href="http://framework-one.github.io/blog/2015/05/14/fw1-3-1-beta-1/"/>
    <updated>2015-05-14T22:40:49-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/05/14/fw1-3-1-beta-1</id>
    <content type="html"><![CDATA[<p>The first beta version of FW/1 3.1 is available for testing. This is a minor bug fix and enhancement release. You can <a href="https://github.com/framework-one/fw1/releases/tag/v3.1-beta1">download FW/1 3.1 Beta 1</a> from GitHub, as well as read the full release notes there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 2.5.2 & 2.2.3 - Important Updates!]]></title>
    <link href="http://framework-one.github.io/blog/2015/05/09/fw1-2-5-1-2-2-2-important/"/>
    <updated>2015-05-09T22:20:49-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/05/09/fw1-2-5-1-2-2-2-important</id>
    <content type="html"><![CDATA[<p>The thread safety issue affecting SES URLs and routes in FW/1 3.0 has been backported to the 2.2.x and 2.5.x releases so if you believe you are seeing incorrectly routed requests on either of those releases, you can update to the appropriate patch release:</p>

<ul>
  <li><a href="https://github.com/framework-one/fw1/releases/tag/v2.5.2">download FW/1 2.5.2</a> to replace Release 2.5.1 or 2.5</li>
  <li><a href="https://github.com/framework-one/fw1/releases/tag/v2.2.3">download FW/1 2.2.3</a> to replace Release 2.2.2, 2.2.1 or 2.2</li>
</ul>

<p>These include a context root fix for 2.5.1 and 2.2.2.</p>

<p>If you are on an earlier release of FW/1 and believe you are seeing the issue that is fixed in this patch, please post on the FW/1 mailing list (I’d rather not backport this patch any further – I’d rather you upgraded!).</p>

<p>Once again, thank you to David Sedeño who highlighted this critical issue!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.0.2 - Important Update!]]></title>
    <link href="http://framework-one.github.io/blog/2015/05/09/fw1-3-0-1-important/"/>
    <updated>2015-05-09T22:00:49-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/05/09/fw1-3-0-1-important</id>
    <content type="html"><![CDATA[<p>If you are using SES URLs or routes with FW/1 3.0 you should <a href="https://github.com/framework-one/fw1/releases/tag/v3.0.2">download FW/1 3.0.2</a> and update your applications as soon as possible, to address a thread safety issue in the way that <code>CGI.PATH_INFO</code> was handled in FW/1 3.0. This is an update to 3.0.1 and includes a context root fix.</p>

<p>The symptoms you might see include incorrectly routed requests under load.</p>

<p>Thank you to David Sedeño who highlighted this critical issue!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.1 Begins...]]></title>
    <link href="http://framework-one.github.io/blog/2015/03/21/fw1-3-1-begins/"/>
    <updated>2015-03-21T14:30:49-07:00</updated>
    <id>http://framework-one.github.io/blog/2015/03/21/fw1-3-1-begins</id>
    <content type="html"><![CDATA[<p>I released FW/1 3.0 about a month ago and now it’s time to get started on the 3.1 release.<!-- more --></p>

<p>FW/1 3.1 will be primarily a maintenance release. You can read the <a href="https://github.com/framework-one/fw1/milestones/3.1">current list of changes slated for FW/1 3.1</a> on the GitHub issues page. Depending on how long it takes to get 3.1 done, additional issues may be added. And, of course, some of these issues may be slipped to 3.5 (currently represented by the <a href="https://github.com/framework-one/fw1/tree/clojure">Clojure branch of FW/1</a> in the GitHub repo and the <a href="https://github.com/framework-one/fw1/milestones/3.5">short list of FW/1 3.5 issues</a>).</p>

<p>Starting with release 3.0, the <a href="http://framework-one.github.io/documentation/">FW/1 documentation</a> will be versioned and the top-level page will always represent the latest version in development. You can read the <a href="http://framework-one.github.io/documentation/3.0/">FW/1 3.0 documentation</a> separately already. The sidebar will always show two releases (develop and master) fully linked - older versions will be listed in future, with just a link to the index page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.0 Released!]]></title>
    <link href="http://framework-one.github.io/blog/2015/02/24/fw1-3-0-released/"/>
    <updated>2015-02-24T09:30:49-08:00</updated>
    <id>http://framework-one.github.io/blog/2015/02/24/fw1-3-0-released</id>
    <content type="html"><![CDATA[<p>I’m pleased to announce that after lots of user testing and almost no issues found, the Gold Release of <a href="https://github.com/framework-one/fw1/releases/tag/v3.0">FW/1 3.0</a> is now available!<!-- more --></p>

<p>About two and a half weeks ago I released <a href="http://framework-one.github.io/blog/2015/02/06/fw1-3-0-rc-2-available/">FW/1 3.0 RC 2</a> and only one minor issue was reported (an inconsistency between <code>buildURL()</code> and <code>buildCustomURL()</code> regarding how <code>baseURL</code> was handled). That has been fixed, along with the addition of a new extension point for DI/1 (<code>metadata()</code>).</p>

<p>You can see a <a href="https://github.com/framework-one/fw1/issues?milestone=13&amp;q=is%3Aclosed">full list of issues fixed in FW/1 for 3.0</a> and a <a href="https://github.com/framework-one/di1/issues?milestone=1&amp;q=is%3Aclosed">full list of issues fixed in DI/1 1.0</a> on GitHub. This represents the official release of DI/1 1.0 as well.</p>

<p>Thank you to everyone who has contributed to the 3.0 release - it’s been a long time in the making! Particular thanks go to Nando Breiter for migrating the DI/1 documentation from the old wiki to the new FW/1 website. Also thanks to John Berquist, Ryan Guill, Cameron Childress, and Adam Tuttle for you code contributions and everyone who tested prerelease builds of FW/1 and reported issues and made suggestions! Thank you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 3.0 RC 2 Available]]></title>
    <link href="http://framework-one.github.io/blog/2015/02/06/fw1-3-0-rc-2-available/"/>
    <updated>2015-02-06T20:21:49-08:00</updated>
    <id>http://framework-one.github.io/blog/2015/02/06/fw1-3-0-rc-2-available</id>
    <content type="html"><![CDATA[<p>About two weeks ago I released <a href="http://framework-one.github.io/blog/2015/01/24/fw1-3-0-rc-1-available/">FW/1 3.0 RC 1</a> and the only real bug persisting at that point was related to <a href="https://github.com/framework-one/fw1/issues/283">DI/1 dotted path deduction</a>.</p>

<p>I think that bug is finally squashed, based on early testing by some users that had encountered the bug, so the second <a href="https://github.com/framework-one/fw1/releases/tag/v3.0-rc2">Release Candidate build</a> of FW/1 3.0 is now available!<!-- more --></p>

<p>In addition to fixing that DI/1 bug, the only other change since RC 1 is some cleanup of the <code>examples</code> folder. That means this RC is almost certainly going to be gold candidate for the final 3.0 release.</p>

<p>Please download and test this version and report any issues you find. I’d like to cut the final 3.0 release fairly soon, so I can merge <code>develop</code> to <code>master</code> and start planning FW/1 3.5.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lucee and FW/1]]></title>
    <link href="http://framework-one.github.io/blog/2015/01/29/lucee-fw1/"/>
    <updated>2015-01-29T13:30:49-08:00</updated>
    <id>http://framework-one.github.io/blog/2015/01/29/lucee-fw1</id>
    <content type="html"><![CDATA[<p>Today saw the announcement of the <a href="http://lucee.org">Lucee Association Switzerland</a> and the release of a new open source CFML engine: <a href="http://lucee.org/downloads.html">Lucee 4.5.0</a>.</p>

<p>For background on the new engine and the association behind it, read <a href="http://blog.adamcameron.me/2015/01/lucee.html">Adam Cameron’s blog post with Q&amp;A</a> about the launch.</p>

<p>I’ve already migrated all my local test environments to Lucee and can report that FW/1 (and DI/1 and cfmljure) all run beautifully on it - and it will be my primary test environment for future development of the FW/1 family going forward.</p>

<p>I’ve also migrated my local dev environment for World Singles over to Lucee and that went pretty smoothly too (I encountered just two issues - both minor, one already fixed in Lucee’s master repository).</p>

<p>The <a href="https://bitbucket.org/lucee/lucee/wiki/Home">Lucee wiki</a> has information about downloading and installing Lucee, as well as building Lucee from source, and how to migrate from Railo to Lucee (hint: it’s really easy - stop the server, remove <code>railo.jar</code>, add <code>lucee.jar</code>, start the server).</p>

<p>Have fun with Lucee!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FW/1 & Clojure Sitting in Tree]]></title>
    <link href="http://framework-one.github.io/blog/2015/01/25/fw1-clojure-sitting-in-a-tree/"/>
    <updated>2015-01-25T13:30:49-08:00</updated>
    <id>http://framework-one.github.io/blog/2015/01/25/fw1-clojure-sitting-in-a-tree</id>
    <content type="html"><![CDATA[<p>Anyone following my tech trajectory will know that, after starting to learn Clojure in 2010, I’ve moved increasingly away from CFML and toward Clojure. In 2014, my team decided that Clojure would be our official primary language and all new development would happen there instead of in CFML. We still have a lot of CFML code in production - about 90kloc - but we consider it “legacy code” at this point. Most of that CFML code is a large ColdBox app that we built about five years ago (technically it’s three ColdBox apps but they share a lot of code). Our application Model has been slowly moving to Clojure so that we can reuse that code in new applications we’re building in Clojure. We’ve also been building new apps with FW/1 (and reusing both our CFML code and our Clojure code). We still like CFML as a templating language for views and our controllers - in our FW/1 apps at least - are often mostly just “glue” code that lets us call into our Clojure model code.<!-- more --></p>

<p>I’ve talked in passing on the FW/1 mailing list about the possibility of deeper integration with Clojure and I recently published <a href="https://github.com/framework-one/cfmljure/releases/tag/v0.1.0">cfmljure 0.1.0</a> - which I’ll be blogging about shortly - and so the topic came up again on the mailing list about this integration. I’d been thinking about how to write controllers in Clojure so that you could have a FW/1 app that used CFML for the views - where it excels as a templating language - and Clojure for the controllers and the model, leveraging the expressive power and immutable safety for all your business logic.</p>

<p>Over the last few days, I created a fork of FW/1 3.0 that included cfmljure and built a proof of concept of Clojure controllers. You can take a look at the <a href="https://github.com/framework-one/fw1/tree/clojure/examples/6helloclojure">FW/1 example with Clojure controllers</a> on the <code>clojure</code> branch of the FW/1 repo. I created the project using Leiningen (Clojure’s build tool) and then added <code>Application.cfc</code>, <code>index.cfm</code>, and the <code>views/</code> tree. Then I wrote the <code>controllers/main.clj</code> file (in <code>src/hello</code>) and the <code>controllers_test.clj</code> test file (in <code>test/hello</code>). Unit testing is built in, so you can run <code>lein test</code> to see the results. Then I refactored the Clojure code (creating the separate <code>greet.clj</code> file) and added a “service” in Clojure just for fun. The FW/1 app uses <code>framework.ioclj</code> - a extended version of DI/1 that uses cfmljure - to auto-discover the Clojure code (and the CFML code - you can mix’n’match) and wraps the Clojure controllers in <code>framework.cljcontroller</code> (to adapt to Clojure’s pure function calling convention, and to handle some FW/1-specific functionality). The CFML views are run as usual (and if you look in <code>views/main/default.cfm</code> you’ll see a call to the Clojure “service” via the bean factory: <code>getBeanFactory().getBean("greeterService").greetings("Earthling!")</code>).</p>

<p>I’m rather excited about this because it means we’ll have a way, at work, to further migrate our model code from CFML to Clojure, while maintaining “legacy” CFML code alongside, <em>right there in the same FW/1 application!</em></p>

<p>This won’t be part of FW/1 3.0. Instead it will stay on the <code>clojure</code> branch until release 3.0 is out (<code>develop</code> will be merged to <code>master</code> for that), but it will be part of FW/1 3.5 which will be the next release. That way it can get some field testing in production as well as some polish and some documentation love. Stay tuned!</p>

<p>p.s. Right now cfmljure only runs on Railo. The CFML code itself could be made portable enough to run on ColdFusion but the real problem is interop with Java/Clojure: ColdFusion thinks 42 is a string and so you need to do a lot of string-to-number conversions to interact with Clojure through cfmljure. I haven’t used ColdFusion for over five years - just Railo - so I don’t have much incentive, but if you feel inclined to send a Pull Request with changes to make cfmljure ColdFusion-compatible…</p>

<p>p.p.s. cfmljure now runs on Adobe ColdFusion 11, Lucee, and Railo! Thanks to Andrew Myers for tackling ColdFusion support.</p>
]]></content>
  </entry>
  
</feed>
